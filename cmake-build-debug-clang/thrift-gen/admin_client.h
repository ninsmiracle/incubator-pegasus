/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef admin_client_H
#define admin_client_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "meta_admin_types.h"

namespace dsn { namespace replication {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class admin_clientIf {
 public:
  virtual ~admin_clientIf() {}
  virtual void create_app(configuration_create_app_response& _return, const configuration_create_app_request& req) = 0;
  virtual void drop_app(configuration_drop_app_response& _return, const configuration_drop_app_request& req) = 0;
  virtual void recall_app(configuration_recall_app_response& _return, const configuration_recall_app_request& req) = 0;
  virtual void list_apps(configuration_list_apps_response& _return, const configuration_list_apps_request& req) = 0;
  virtual void add_duplication( ::dsn::replication::duplication_add_response& _return, const  ::dsn::replication::duplication_add_request& req) = 0;
  virtual void query_duplication( ::dsn::replication::duplication_query_response& _return, const  ::dsn::replication::duplication_query_request& req) = 0;
  virtual void modify_duplication( ::dsn::replication::duplication_modify_response& _return, const  ::dsn::replication::duplication_modify_request& req) = 0;
  virtual void query_app_info(query_app_info_response& _return, const query_app_info_request& req) = 0;
  virtual void update_app_env(configuration_update_app_env_response& _return, const configuration_update_app_env_request& req) = 0;
  virtual void list_nodes(configuration_list_nodes_response& _return, const configuration_list_nodes_request& req) = 0;
  virtual void query_cluster_info(configuration_cluster_info_response& _return, const configuration_cluster_info_request& req) = 0;
  virtual void meta_control(configuration_meta_control_response& _return, const configuration_meta_control_request& req) = 0;
  virtual void query_backup_policy( ::dsn::replication::configuration_query_backup_policy_response& _return, const  ::dsn::replication::configuration_query_backup_policy_request& req) = 0;
  virtual void balance(configuration_balancer_response& _return, const configuration_balancer_request& req) = 0;
  virtual void start_backup_app( ::dsn::replication::start_backup_app_response& _return, const  ::dsn::replication::start_backup_app_request& req) = 0;
  virtual void query_backup_status( ::dsn::replication::query_backup_status_response& _return, const  ::dsn::replication::query_backup_status_request& req) = 0;
  virtual void restore_app(configuration_create_app_response& _return, const  ::dsn::replication::configuration_restore_request& req) = 0;
  virtual void start_partition_split( ::dsn::replication::start_partition_split_response& _return, const  ::dsn::replication::start_partition_split_request& req) = 0;
  virtual void query_split_status( ::dsn::replication::query_split_response& _return, const  ::dsn::replication::query_split_request& req) = 0;
  virtual void control_partition_split( ::dsn::replication::control_split_response& _return, const  ::dsn::replication::control_split_request& req) = 0;
  virtual void start_bulk_load( ::dsn::replication::start_bulk_load_response& _return, const  ::dsn::replication::start_bulk_load_request& req) = 0;
  virtual void query_bulk_load_status( ::dsn::replication::query_bulk_load_response& _return, const  ::dsn::replication::query_bulk_load_request& req) = 0;
  virtual void control_bulk_load( ::dsn::replication::control_bulk_load_response& _return, const  ::dsn::replication::control_bulk_load_request& req) = 0;
  virtual void clear_bulk_load( ::dsn::replication::clear_bulk_load_state_response& _return, const  ::dsn::replication::clear_bulk_load_state_request& req) = 0;
  virtual void start_manual_compact(start_app_manual_compact_response& _return, const start_app_manual_compact_request& req) = 0;
  virtual void query_manual_compact(query_app_manual_compact_response& _return, const query_app_manual_compact_request& req) = 0;
};

class admin_clientIfFactory {
 public:
  typedef admin_clientIf Handler;

  virtual ~admin_clientIfFactory() {}

  virtual admin_clientIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(admin_clientIf* /* handler */) = 0;
};

class admin_clientIfSingletonFactory : virtual public admin_clientIfFactory {
 public:
  admin_clientIfSingletonFactory(const boost::shared_ptr<admin_clientIf>& iface) : iface_(iface) {}
  virtual ~admin_clientIfSingletonFactory() {}

  virtual admin_clientIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(admin_clientIf* /* handler */) {}

 protected:
  boost::shared_ptr<admin_clientIf> iface_;
};

class admin_clientNull : virtual public admin_clientIf {
 public:
  virtual ~admin_clientNull() {}
  void create_app(configuration_create_app_response& /* _return */, const configuration_create_app_request& /* req */) {
    return;
  }
  void drop_app(configuration_drop_app_response& /* _return */, const configuration_drop_app_request& /* req */) {
    return;
  }
  void recall_app(configuration_recall_app_response& /* _return */, const configuration_recall_app_request& /* req */) {
    return;
  }
  void list_apps(configuration_list_apps_response& /* _return */, const configuration_list_apps_request& /* req */) {
    return;
  }
  void add_duplication( ::dsn::replication::duplication_add_response& /* _return */, const  ::dsn::replication::duplication_add_request& /* req */) {
    return;
  }
  void query_duplication( ::dsn::replication::duplication_query_response& /* _return */, const  ::dsn::replication::duplication_query_request& /* req */) {
    return;
  }
  void modify_duplication( ::dsn::replication::duplication_modify_response& /* _return */, const  ::dsn::replication::duplication_modify_request& /* req */) {
    return;
  }
  void query_app_info(query_app_info_response& /* _return */, const query_app_info_request& /* req */) {
    return;
  }
  void update_app_env(configuration_update_app_env_response& /* _return */, const configuration_update_app_env_request& /* req */) {
    return;
  }
  void list_nodes(configuration_list_nodes_response& /* _return */, const configuration_list_nodes_request& /* req */) {
    return;
  }
  void query_cluster_info(configuration_cluster_info_response& /* _return */, const configuration_cluster_info_request& /* req */) {
    return;
  }
  void meta_control(configuration_meta_control_response& /* _return */, const configuration_meta_control_request& /* req */) {
    return;
  }
  void query_backup_policy( ::dsn::replication::configuration_query_backup_policy_response& /* _return */, const  ::dsn::replication::configuration_query_backup_policy_request& /* req */) {
    return;
  }
  void balance(configuration_balancer_response& /* _return */, const configuration_balancer_request& /* req */) {
    return;
  }
  void start_backup_app( ::dsn::replication::start_backup_app_response& /* _return */, const  ::dsn::replication::start_backup_app_request& /* req */) {
    return;
  }
  void query_backup_status( ::dsn::replication::query_backup_status_response& /* _return */, const  ::dsn::replication::query_backup_status_request& /* req */) {
    return;
  }
  void restore_app(configuration_create_app_response& /* _return */, const  ::dsn::replication::configuration_restore_request& /* req */) {
    return;
  }
  void start_partition_split( ::dsn::replication::start_partition_split_response& /* _return */, const  ::dsn::replication::start_partition_split_request& /* req */) {
    return;
  }
  void query_split_status( ::dsn::replication::query_split_response& /* _return */, const  ::dsn::replication::query_split_request& /* req */) {
    return;
  }
  void control_partition_split( ::dsn::replication::control_split_response& /* _return */, const  ::dsn::replication::control_split_request& /* req */) {
    return;
  }
  void start_bulk_load( ::dsn::replication::start_bulk_load_response& /* _return */, const  ::dsn::replication::start_bulk_load_request& /* req */) {
    return;
  }
  void query_bulk_load_status( ::dsn::replication::query_bulk_load_response& /* _return */, const  ::dsn::replication::query_bulk_load_request& /* req */) {
    return;
  }
  void control_bulk_load( ::dsn::replication::control_bulk_load_response& /* _return */, const  ::dsn::replication::control_bulk_load_request& /* req */) {
    return;
  }
  void clear_bulk_load( ::dsn::replication::clear_bulk_load_state_response& /* _return */, const  ::dsn::replication::clear_bulk_load_state_request& /* req */) {
    return;
  }
  void start_manual_compact(start_app_manual_compact_response& /* _return */, const start_app_manual_compact_request& /* req */) {
    return;
  }
  void query_manual_compact(query_app_manual_compact_response& /* _return */, const query_app_manual_compact_request& /* req */) {
    return;
  }
};

typedef struct _admin_client_create_app_args__isset {
  _admin_client_create_app_args__isset() : req(false) {}
  bool req :1;
} _admin_client_create_app_args__isset;

class admin_client_create_app_args {
 public:

  admin_client_create_app_args(const admin_client_create_app_args&);
  admin_client_create_app_args& operator=(const admin_client_create_app_args&);
  admin_client_create_app_args() {
  }

  virtual ~admin_client_create_app_args() throw();
  configuration_create_app_request req;

  _admin_client_create_app_args__isset __isset;

  void __set_req(const configuration_create_app_request& val);

  bool operator == (const admin_client_create_app_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_create_app_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_create_app_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_create_app_pargs {
 public:


  virtual ~admin_client_create_app_pargs() throw();
  const configuration_create_app_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_create_app_result__isset {
  _admin_client_create_app_result__isset() : success(false) {}
  bool success :1;
} _admin_client_create_app_result__isset;

class admin_client_create_app_result {
 public:

  admin_client_create_app_result(const admin_client_create_app_result&);
  admin_client_create_app_result& operator=(const admin_client_create_app_result&);
  admin_client_create_app_result() {
  }

  virtual ~admin_client_create_app_result() throw();
  configuration_create_app_response success;

  _admin_client_create_app_result__isset __isset;

  void __set_success(const configuration_create_app_response& val);

  bool operator == (const admin_client_create_app_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_create_app_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_create_app_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_create_app_presult__isset {
  _admin_client_create_app_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_create_app_presult__isset;

class admin_client_create_app_presult {
 public:


  virtual ~admin_client_create_app_presult() throw();
  configuration_create_app_response* success;

  _admin_client_create_app_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_drop_app_args__isset {
  _admin_client_drop_app_args__isset() : req(false) {}
  bool req :1;
} _admin_client_drop_app_args__isset;

class admin_client_drop_app_args {
 public:

  admin_client_drop_app_args(const admin_client_drop_app_args&);
  admin_client_drop_app_args& operator=(const admin_client_drop_app_args&);
  admin_client_drop_app_args() {
  }

  virtual ~admin_client_drop_app_args() throw();
  configuration_drop_app_request req;

  _admin_client_drop_app_args__isset __isset;

  void __set_req(const configuration_drop_app_request& val);

  bool operator == (const admin_client_drop_app_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_drop_app_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_drop_app_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_drop_app_pargs {
 public:


  virtual ~admin_client_drop_app_pargs() throw();
  const configuration_drop_app_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_drop_app_result__isset {
  _admin_client_drop_app_result__isset() : success(false) {}
  bool success :1;
} _admin_client_drop_app_result__isset;

class admin_client_drop_app_result {
 public:

  admin_client_drop_app_result(const admin_client_drop_app_result&);
  admin_client_drop_app_result& operator=(const admin_client_drop_app_result&);
  admin_client_drop_app_result() {
  }

  virtual ~admin_client_drop_app_result() throw();
  configuration_drop_app_response success;

  _admin_client_drop_app_result__isset __isset;

  void __set_success(const configuration_drop_app_response& val);

  bool operator == (const admin_client_drop_app_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_drop_app_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_drop_app_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_drop_app_presult__isset {
  _admin_client_drop_app_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_drop_app_presult__isset;

class admin_client_drop_app_presult {
 public:


  virtual ~admin_client_drop_app_presult() throw();
  configuration_drop_app_response* success;

  _admin_client_drop_app_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_recall_app_args__isset {
  _admin_client_recall_app_args__isset() : req(false) {}
  bool req :1;
} _admin_client_recall_app_args__isset;

class admin_client_recall_app_args {
 public:

  admin_client_recall_app_args(const admin_client_recall_app_args&);
  admin_client_recall_app_args& operator=(const admin_client_recall_app_args&);
  admin_client_recall_app_args() {
  }

  virtual ~admin_client_recall_app_args() throw();
  configuration_recall_app_request req;

  _admin_client_recall_app_args__isset __isset;

  void __set_req(const configuration_recall_app_request& val);

  bool operator == (const admin_client_recall_app_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_recall_app_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_recall_app_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_recall_app_pargs {
 public:


  virtual ~admin_client_recall_app_pargs() throw();
  const configuration_recall_app_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_recall_app_result__isset {
  _admin_client_recall_app_result__isset() : success(false) {}
  bool success :1;
} _admin_client_recall_app_result__isset;

class admin_client_recall_app_result {
 public:

  admin_client_recall_app_result(const admin_client_recall_app_result&);
  admin_client_recall_app_result& operator=(const admin_client_recall_app_result&);
  admin_client_recall_app_result() {
  }

  virtual ~admin_client_recall_app_result() throw();
  configuration_recall_app_response success;

  _admin_client_recall_app_result__isset __isset;

  void __set_success(const configuration_recall_app_response& val);

  bool operator == (const admin_client_recall_app_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_recall_app_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_recall_app_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_recall_app_presult__isset {
  _admin_client_recall_app_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_recall_app_presult__isset;

class admin_client_recall_app_presult {
 public:


  virtual ~admin_client_recall_app_presult() throw();
  configuration_recall_app_response* success;

  _admin_client_recall_app_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_list_apps_args__isset {
  _admin_client_list_apps_args__isset() : req(false) {}
  bool req :1;
} _admin_client_list_apps_args__isset;

class admin_client_list_apps_args {
 public:

  admin_client_list_apps_args(const admin_client_list_apps_args&);
  admin_client_list_apps_args& operator=(const admin_client_list_apps_args&);
  admin_client_list_apps_args() {
  }

  virtual ~admin_client_list_apps_args() throw();
  configuration_list_apps_request req;

  _admin_client_list_apps_args__isset __isset;

  void __set_req(const configuration_list_apps_request& val);

  bool operator == (const admin_client_list_apps_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_list_apps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_list_apps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_list_apps_pargs {
 public:


  virtual ~admin_client_list_apps_pargs() throw();
  const configuration_list_apps_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_list_apps_result__isset {
  _admin_client_list_apps_result__isset() : success(false) {}
  bool success :1;
} _admin_client_list_apps_result__isset;

class admin_client_list_apps_result {
 public:

  admin_client_list_apps_result(const admin_client_list_apps_result&);
  admin_client_list_apps_result& operator=(const admin_client_list_apps_result&);
  admin_client_list_apps_result() {
  }

  virtual ~admin_client_list_apps_result() throw();
  configuration_list_apps_response success;

  _admin_client_list_apps_result__isset __isset;

  void __set_success(const configuration_list_apps_response& val);

  bool operator == (const admin_client_list_apps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_list_apps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_list_apps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_list_apps_presult__isset {
  _admin_client_list_apps_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_list_apps_presult__isset;

class admin_client_list_apps_presult {
 public:


  virtual ~admin_client_list_apps_presult() throw();
  configuration_list_apps_response* success;

  _admin_client_list_apps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_add_duplication_args__isset {
  _admin_client_add_duplication_args__isset() : req(false) {}
  bool req :1;
} _admin_client_add_duplication_args__isset;

class admin_client_add_duplication_args {
 public:

  admin_client_add_duplication_args(const admin_client_add_duplication_args&);
  admin_client_add_duplication_args& operator=(const admin_client_add_duplication_args&);
  admin_client_add_duplication_args() {
  }

  virtual ~admin_client_add_duplication_args() throw();
   ::dsn::replication::duplication_add_request req;

  _admin_client_add_duplication_args__isset __isset;

  void __set_req(const  ::dsn::replication::duplication_add_request& val);

  bool operator == (const admin_client_add_duplication_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_add_duplication_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_add_duplication_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_add_duplication_pargs {
 public:


  virtual ~admin_client_add_duplication_pargs() throw();
  const  ::dsn::replication::duplication_add_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_add_duplication_result__isset {
  _admin_client_add_duplication_result__isset() : success(false) {}
  bool success :1;
} _admin_client_add_duplication_result__isset;

class admin_client_add_duplication_result {
 public:

  admin_client_add_duplication_result(const admin_client_add_duplication_result&);
  admin_client_add_duplication_result& operator=(const admin_client_add_duplication_result&);
  admin_client_add_duplication_result() {
  }

  virtual ~admin_client_add_duplication_result() throw();
   ::dsn::replication::duplication_add_response success;

  _admin_client_add_duplication_result__isset __isset;

  void __set_success(const  ::dsn::replication::duplication_add_response& val);

  bool operator == (const admin_client_add_duplication_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_add_duplication_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_add_duplication_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_add_duplication_presult__isset {
  _admin_client_add_duplication_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_add_duplication_presult__isset;

class admin_client_add_duplication_presult {
 public:


  virtual ~admin_client_add_duplication_presult() throw();
   ::dsn::replication::duplication_add_response* success;

  _admin_client_add_duplication_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_query_duplication_args__isset {
  _admin_client_query_duplication_args__isset() : req(false) {}
  bool req :1;
} _admin_client_query_duplication_args__isset;

class admin_client_query_duplication_args {
 public:

  admin_client_query_duplication_args(const admin_client_query_duplication_args&);
  admin_client_query_duplication_args& operator=(const admin_client_query_duplication_args&);
  admin_client_query_duplication_args() {
  }

  virtual ~admin_client_query_duplication_args() throw();
   ::dsn::replication::duplication_query_request req;

  _admin_client_query_duplication_args__isset __isset;

  void __set_req(const  ::dsn::replication::duplication_query_request& val);

  bool operator == (const admin_client_query_duplication_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_duplication_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_duplication_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_query_duplication_pargs {
 public:


  virtual ~admin_client_query_duplication_pargs() throw();
  const  ::dsn::replication::duplication_query_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_duplication_result__isset {
  _admin_client_query_duplication_result__isset() : success(false) {}
  bool success :1;
} _admin_client_query_duplication_result__isset;

class admin_client_query_duplication_result {
 public:

  admin_client_query_duplication_result(const admin_client_query_duplication_result&);
  admin_client_query_duplication_result& operator=(const admin_client_query_duplication_result&);
  admin_client_query_duplication_result() {
  }

  virtual ~admin_client_query_duplication_result() throw();
   ::dsn::replication::duplication_query_response success;

  _admin_client_query_duplication_result__isset __isset;

  void __set_success(const  ::dsn::replication::duplication_query_response& val);

  bool operator == (const admin_client_query_duplication_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_duplication_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_duplication_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_duplication_presult__isset {
  _admin_client_query_duplication_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_query_duplication_presult__isset;

class admin_client_query_duplication_presult {
 public:


  virtual ~admin_client_query_duplication_presult() throw();
   ::dsn::replication::duplication_query_response* success;

  _admin_client_query_duplication_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_modify_duplication_args__isset {
  _admin_client_modify_duplication_args__isset() : req(false) {}
  bool req :1;
} _admin_client_modify_duplication_args__isset;

class admin_client_modify_duplication_args {
 public:

  admin_client_modify_duplication_args(const admin_client_modify_duplication_args&);
  admin_client_modify_duplication_args& operator=(const admin_client_modify_duplication_args&);
  admin_client_modify_duplication_args() {
  }

  virtual ~admin_client_modify_duplication_args() throw();
   ::dsn::replication::duplication_modify_request req;

  _admin_client_modify_duplication_args__isset __isset;

  void __set_req(const  ::dsn::replication::duplication_modify_request& val);

  bool operator == (const admin_client_modify_duplication_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_modify_duplication_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_modify_duplication_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_modify_duplication_pargs {
 public:


  virtual ~admin_client_modify_duplication_pargs() throw();
  const  ::dsn::replication::duplication_modify_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_modify_duplication_result__isset {
  _admin_client_modify_duplication_result__isset() : success(false) {}
  bool success :1;
} _admin_client_modify_duplication_result__isset;

class admin_client_modify_duplication_result {
 public:

  admin_client_modify_duplication_result(const admin_client_modify_duplication_result&);
  admin_client_modify_duplication_result& operator=(const admin_client_modify_duplication_result&);
  admin_client_modify_duplication_result() {
  }

  virtual ~admin_client_modify_duplication_result() throw();
   ::dsn::replication::duplication_modify_response success;

  _admin_client_modify_duplication_result__isset __isset;

  void __set_success(const  ::dsn::replication::duplication_modify_response& val);

  bool operator == (const admin_client_modify_duplication_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_modify_duplication_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_modify_duplication_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_modify_duplication_presult__isset {
  _admin_client_modify_duplication_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_modify_duplication_presult__isset;

class admin_client_modify_duplication_presult {
 public:


  virtual ~admin_client_modify_duplication_presult() throw();
   ::dsn::replication::duplication_modify_response* success;

  _admin_client_modify_duplication_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_query_app_info_args__isset {
  _admin_client_query_app_info_args__isset() : req(false) {}
  bool req :1;
} _admin_client_query_app_info_args__isset;

class admin_client_query_app_info_args {
 public:

  admin_client_query_app_info_args(const admin_client_query_app_info_args&);
  admin_client_query_app_info_args& operator=(const admin_client_query_app_info_args&);
  admin_client_query_app_info_args() {
  }

  virtual ~admin_client_query_app_info_args() throw();
  query_app_info_request req;

  _admin_client_query_app_info_args__isset __isset;

  void __set_req(const query_app_info_request& val);

  bool operator == (const admin_client_query_app_info_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_app_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_app_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_query_app_info_pargs {
 public:


  virtual ~admin_client_query_app_info_pargs() throw();
  const query_app_info_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_app_info_result__isset {
  _admin_client_query_app_info_result__isset() : success(false) {}
  bool success :1;
} _admin_client_query_app_info_result__isset;

class admin_client_query_app_info_result {
 public:

  admin_client_query_app_info_result(const admin_client_query_app_info_result&);
  admin_client_query_app_info_result& operator=(const admin_client_query_app_info_result&);
  admin_client_query_app_info_result() {
  }

  virtual ~admin_client_query_app_info_result() throw();
  query_app_info_response success;

  _admin_client_query_app_info_result__isset __isset;

  void __set_success(const query_app_info_response& val);

  bool operator == (const admin_client_query_app_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_app_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_app_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_app_info_presult__isset {
  _admin_client_query_app_info_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_query_app_info_presult__isset;

class admin_client_query_app_info_presult {
 public:


  virtual ~admin_client_query_app_info_presult() throw();
  query_app_info_response* success;

  _admin_client_query_app_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_update_app_env_args__isset {
  _admin_client_update_app_env_args__isset() : req(false) {}
  bool req :1;
} _admin_client_update_app_env_args__isset;

class admin_client_update_app_env_args {
 public:

  admin_client_update_app_env_args(const admin_client_update_app_env_args&);
  admin_client_update_app_env_args& operator=(const admin_client_update_app_env_args&);
  admin_client_update_app_env_args() {
  }

  virtual ~admin_client_update_app_env_args() throw();
  configuration_update_app_env_request req;

  _admin_client_update_app_env_args__isset __isset;

  void __set_req(const configuration_update_app_env_request& val);

  bool operator == (const admin_client_update_app_env_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_update_app_env_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_update_app_env_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_update_app_env_pargs {
 public:


  virtual ~admin_client_update_app_env_pargs() throw();
  const configuration_update_app_env_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_update_app_env_result__isset {
  _admin_client_update_app_env_result__isset() : success(false) {}
  bool success :1;
} _admin_client_update_app_env_result__isset;

class admin_client_update_app_env_result {
 public:

  admin_client_update_app_env_result(const admin_client_update_app_env_result&);
  admin_client_update_app_env_result& operator=(const admin_client_update_app_env_result&);
  admin_client_update_app_env_result() {
  }

  virtual ~admin_client_update_app_env_result() throw();
  configuration_update_app_env_response success;

  _admin_client_update_app_env_result__isset __isset;

  void __set_success(const configuration_update_app_env_response& val);

  bool operator == (const admin_client_update_app_env_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_update_app_env_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_update_app_env_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_update_app_env_presult__isset {
  _admin_client_update_app_env_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_update_app_env_presult__isset;

class admin_client_update_app_env_presult {
 public:


  virtual ~admin_client_update_app_env_presult() throw();
  configuration_update_app_env_response* success;

  _admin_client_update_app_env_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_list_nodes_args__isset {
  _admin_client_list_nodes_args__isset() : req(false) {}
  bool req :1;
} _admin_client_list_nodes_args__isset;

class admin_client_list_nodes_args {
 public:

  admin_client_list_nodes_args(const admin_client_list_nodes_args&);
  admin_client_list_nodes_args& operator=(const admin_client_list_nodes_args&);
  admin_client_list_nodes_args() {
  }

  virtual ~admin_client_list_nodes_args() throw();
  configuration_list_nodes_request req;

  _admin_client_list_nodes_args__isset __isset;

  void __set_req(const configuration_list_nodes_request& val);

  bool operator == (const admin_client_list_nodes_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_list_nodes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_list_nodes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_list_nodes_pargs {
 public:


  virtual ~admin_client_list_nodes_pargs() throw();
  const configuration_list_nodes_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_list_nodes_result__isset {
  _admin_client_list_nodes_result__isset() : success(false) {}
  bool success :1;
} _admin_client_list_nodes_result__isset;

class admin_client_list_nodes_result {
 public:

  admin_client_list_nodes_result(const admin_client_list_nodes_result&);
  admin_client_list_nodes_result& operator=(const admin_client_list_nodes_result&);
  admin_client_list_nodes_result() {
  }

  virtual ~admin_client_list_nodes_result() throw();
  configuration_list_nodes_response success;

  _admin_client_list_nodes_result__isset __isset;

  void __set_success(const configuration_list_nodes_response& val);

  bool operator == (const admin_client_list_nodes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_list_nodes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_list_nodes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_list_nodes_presult__isset {
  _admin_client_list_nodes_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_list_nodes_presult__isset;

class admin_client_list_nodes_presult {
 public:


  virtual ~admin_client_list_nodes_presult() throw();
  configuration_list_nodes_response* success;

  _admin_client_list_nodes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_query_cluster_info_args__isset {
  _admin_client_query_cluster_info_args__isset() : req(false) {}
  bool req :1;
} _admin_client_query_cluster_info_args__isset;

class admin_client_query_cluster_info_args {
 public:

  admin_client_query_cluster_info_args(const admin_client_query_cluster_info_args&);
  admin_client_query_cluster_info_args& operator=(const admin_client_query_cluster_info_args&);
  admin_client_query_cluster_info_args() {
  }

  virtual ~admin_client_query_cluster_info_args() throw();
  configuration_cluster_info_request req;

  _admin_client_query_cluster_info_args__isset __isset;

  void __set_req(const configuration_cluster_info_request& val);

  bool operator == (const admin_client_query_cluster_info_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_cluster_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_cluster_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_query_cluster_info_pargs {
 public:


  virtual ~admin_client_query_cluster_info_pargs() throw();
  const configuration_cluster_info_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_cluster_info_result__isset {
  _admin_client_query_cluster_info_result__isset() : success(false) {}
  bool success :1;
} _admin_client_query_cluster_info_result__isset;

class admin_client_query_cluster_info_result {
 public:

  admin_client_query_cluster_info_result(const admin_client_query_cluster_info_result&);
  admin_client_query_cluster_info_result& operator=(const admin_client_query_cluster_info_result&);
  admin_client_query_cluster_info_result() {
  }

  virtual ~admin_client_query_cluster_info_result() throw();
  configuration_cluster_info_response success;

  _admin_client_query_cluster_info_result__isset __isset;

  void __set_success(const configuration_cluster_info_response& val);

  bool operator == (const admin_client_query_cluster_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_cluster_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_cluster_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_cluster_info_presult__isset {
  _admin_client_query_cluster_info_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_query_cluster_info_presult__isset;

class admin_client_query_cluster_info_presult {
 public:


  virtual ~admin_client_query_cluster_info_presult() throw();
  configuration_cluster_info_response* success;

  _admin_client_query_cluster_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_meta_control_args__isset {
  _admin_client_meta_control_args__isset() : req(false) {}
  bool req :1;
} _admin_client_meta_control_args__isset;

class admin_client_meta_control_args {
 public:

  admin_client_meta_control_args(const admin_client_meta_control_args&);
  admin_client_meta_control_args& operator=(const admin_client_meta_control_args&);
  admin_client_meta_control_args() {
  }

  virtual ~admin_client_meta_control_args() throw();
  configuration_meta_control_request req;

  _admin_client_meta_control_args__isset __isset;

  void __set_req(const configuration_meta_control_request& val);

  bool operator == (const admin_client_meta_control_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_meta_control_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_meta_control_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_meta_control_pargs {
 public:


  virtual ~admin_client_meta_control_pargs() throw();
  const configuration_meta_control_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_meta_control_result__isset {
  _admin_client_meta_control_result__isset() : success(false) {}
  bool success :1;
} _admin_client_meta_control_result__isset;

class admin_client_meta_control_result {
 public:

  admin_client_meta_control_result(const admin_client_meta_control_result&);
  admin_client_meta_control_result& operator=(const admin_client_meta_control_result&);
  admin_client_meta_control_result() {
  }

  virtual ~admin_client_meta_control_result() throw();
  configuration_meta_control_response success;

  _admin_client_meta_control_result__isset __isset;

  void __set_success(const configuration_meta_control_response& val);

  bool operator == (const admin_client_meta_control_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_meta_control_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_meta_control_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_meta_control_presult__isset {
  _admin_client_meta_control_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_meta_control_presult__isset;

class admin_client_meta_control_presult {
 public:


  virtual ~admin_client_meta_control_presult() throw();
  configuration_meta_control_response* success;

  _admin_client_meta_control_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_query_backup_policy_args__isset {
  _admin_client_query_backup_policy_args__isset() : req(false) {}
  bool req :1;
} _admin_client_query_backup_policy_args__isset;

class admin_client_query_backup_policy_args {
 public:

  admin_client_query_backup_policy_args(const admin_client_query_backup_policy_args&);
  admin_client_query_backup_policy_args& operator=(const admin_client_query_backup_policy_args&);
  admin_client_query_backup_policy_args() {
  }

  virtual ~admin_client_query_backup_policy_args() throw();
   ::dsn::replication::configuration_query_backup_policy_request req;

  _admin_client_query_backup_policy_args__isset __isset;

  void __set_req(const  ::dsn::replication::configuration_query_backup_policy_request& val);

  bool operator == (const admin_client_query_backup_policy_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_backup_policy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_backup_policy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_query_backup_policy_pargs {
 public:


  virtual ~admin_client_query_backup_policy_pargs() throw();
  const  ::dsn::replication::configuration_query_backup_policy_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_backup_policy_result__isset {
  _admin_client_query_backup_policy_result__isset() : success(false) {}
  bool success :1;
} _admin_client_query_backup_policy_result__isset;

class admin_client_query_backup_policy_result {
 public:

  admin_client_query_backup_policy_result(const admin_client_query_backup_policy_result&);
  admin_client_query_backup_policy_result& operator=(const admin_client_query_backup_policy_result&);
  admin_client_query_backup_policy_result() {
  }

  virtual ~admin_client_query_backup_policy_result() throw();
   ::dsn::replication::configuration_query_backup_policy_response success;

  _admin_client_query_backup_policy_result__isset __isset;

  void __set_success(const  ::dsn::replication::configuration_query_backup_policy_response& val);

  bool operator == (const admin_client_query_backup_policy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_backup_policy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_backup_policy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_backup_policy_presult__isset {
  _admin_client_query_backup_policy_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_query_backup_policy_presult__isset;

class admin_client_query_backup_policy_presult {
 public:


  virtual ~admin_client_query_backup_policy_presult() throw();
   ::dsn::replication::configuration_query_backup_policy_response* success;

  _admin_client_query_backup_policy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_balance_args__isset {
  _admin_client_balance_args__isset() : req(false) {}
  bool req :1;
} _admin_client_balance_args__isset;

class admin_client_balance_args {
 public:

  admin_client_balance_args(const admin_client_balance_args&);
  admin_client_balance_args& operator=(const admin_client_balance_args&);
  admin_client_balance_args() {
  }

  virtual ~admin_client_balance_args() throw();
  configuration_balancer_request req;

  _admin_client_balance_args__isset __isset;

  void __set_req(const configuration_balancer_request& val);

  bool operator == (const admin_client_balance_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_balance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_balance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_balance_pargs {
 public:


  virtual ~admin_client_balance_pargs() throw();
  const configuration_balancer_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_balance_result__isset {
  _admin_client_balance_result__isset() : success(false) {}
  bool success :1;
} _admin_client_balance_result__isset;

class admin_client_balance_result {
 public:

  admin_client_balance_result(const admin_client_balance_result&);
  admin_client_balance_result& operator=(const admin_client_balance_result&);
  admin_client_balance_result() {
  }

  virtual ~admin_client_balance_result() throw();
  configuration_balancer_response success;

  _admin_client_balance_result__isset __isset;

  void __set_success(const configuration_balancer_response& val);

  bool operator == (const admin_client_balance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_balance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_balance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_balance_presult__isset {
  _admin_client_balance_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_balance_presult__isset;

class admin_client_balance_presult {
 public:


  virtual ~admin_client_balance_presult() throw();
  configuration_balancer_response* success;

  _admin_client_balance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_start_backup_app_args__isset {
  _admin_client_start_backup_app_args__isset() : req(false) {}
  bool req :1;
} _admin_client_start_backup_app_args__isset;

class admin_client_start_backup_app_args {
 public:

  admin_client_start_backup_app_args(const admin_client_start_backup_app_args&);
  admin_client_start_backup_app_args& operator=(const admin_client_start_backup_app_args&);
  admin_client_start_backup_app_args() {
  }

  virtual ~admin_client_start_backup_app_args() throw();
   ::dsn::replication::start_backup_app_request req;

  _admin_client_start_backup_app_args__isset __isset;

  void __set_req(const  ::dsn::replication::start_backup_app_request& val);

  bool operator == (const admin_client_start_backup_app_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_start_backup_app_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_start_backup_app_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_start_backup_app_pargs {
 public:


  virtual ~admin_client_start_backup_app_pargs() throw();
  const  ::dsn::replication::start_backup_app_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_start_backup_app_result__isset {
  _admin_client_start_backup_app_result__isset() : success(false) {}
  bool success :1;
} _admin_client_start_backup_app_result__isset;

class admin_client_start_backup_app_result {
 public:

  admin_client_start_backup_app_result(const admin_client_start_backup_app_result&);
  admin_client_start_backup_app_result& operator=(const admin_client_start_backup_app_result&);
  admin_client_start_backup_app_result() {
  }

  virtual ~admin_client_start_backup_app_result() throw();
   ::dsn::replication::start_backup_app_response success;

  _admin_client_start_backup_app_result__isset __isset;

  void __set_success(const  ::dsn::replication::start_backup_app_response& val);

  bool operator == (const admin_client_start_backup_app_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_start_backup_app_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_start_backup_app_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_start_backup_app_presult__isset {
  _admin_client_start_backup_app_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_start_backup_app_presult__isset;

class admin_client_start_backup_app_presult {
 public:


  virtual ~admin_client_start_backup_app_presult() throw();
   ::dsn::replication::start_backup_app_response* success;

  _admin_client_start_backup_app_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_query_backup_status_args__isset {
  _admin_client_query_backup_status_args__isset() : req(false) {}
  bool req :1;
} _admin_client_query_backup_status_args__isset;

class admin_client_query_backup_status_args {
 public:

  admin_client_query_backup_status_args(const admin_client_query_backup_status_args&);
  admin_client_query_backup_status_args& operator=(const admin_client_query_backup_status_args&);
  admin_client_query_backup_status_args() {
  }

  virtual ~admin_client_query_backup_status_args() throw();
   ::dsn::replication::query_backup_status_request req;

  _admin_client_query_backup_status_args__isset __isset;

  void __set_req(const  ::dsn::replication::query_backup_status_request& val);

  bool operator == (const admin_client_query_backup_status_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_backup_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_backup_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_query_backup_status_pargs {
 public:


  virtual ~admin_client_query_backup_status_pargs() throw();
  const  ::dsn::replication::query_backup_status_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_backup_status_result__isset {
  _admin_client_query_backup_status_result__isset() : success(false) {}
  bool success :1;
} _admin_client_query_backup_status_result__isset;

class admin_client_query_backup_status_result {
 public:

  admin_client_query_backup_status_result(const admin_client_query_backup_status_result&);
  admin_client_query_backup_status_result& operator=(const admin_client_query_backup_status_result&);
  admin_client_query_backup_status_result() {
  }

  virtual ~admin_client_query_backup_status_result() throw();
   ::dsn::replication::query_backup_status_response success;

  _admin_client_query_backup_status_result__isset __isset;

  void __set_success(const  ::dsn::replication::query_backup_status_response& val);

  bool operator == (const admin_client_query_backup_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_backup_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_backup_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_backup_status_presult__isset {
  _admin_client_query_backup_status_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_query_backup_status_presult__isset;

class admin_client_query_backup_status_presult {
 public:


  virtual ~admin_client_query_backup_status_presult() throw();
   ::dsn::replication::query_backup_status_response* success;

  _admin_client_query_backup_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_restore_app_args__isset {
  _admin_client_restore_app_args__isset() : req(false) {}
  bool req :1;
} _admin_client_restore_app_args__isset;

class admin_client_restore_app_args {
 public:

  admin_client_restore_app_args(const admin_client_restore_app_args&);
  admin_client_restore_app_args& operator=(const admin_client_restore_app_args&);
  admin_client_restore_app_args() {
  }

  virtual ~admin_client_restore_app_args() throw();
   ::dsn::replication::configuration_restore_request req;

  _admin_client_restore_app_args__isset __isset;

  void __set_req(const  ::dsn::replication::configuration_restore_request& val);

  bool operator == (const admin_client_restore_app_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_restore_app_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_restore_app_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_restore_app_pargs {
 public:


  virtual ~admin_client_restore_app_pargs() throw();
  const  ::dsn::replication::configuration_restore_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_restore_app_result__isset {
  _admin_client_restore_app_result__isset() : success(false) {}
  bool success :1;
} _admin_client_restore_app_result__isset;

class admin_client_restore_app_result {
 public:

  admin_client_restore_app_result(const admin_client_restore_app_result&);
  admin_client_restore_app_result& operator=(const admin_client_restore_app_result&);
  admin_client_restore_app_result() {
  }

  virtual ~admin_client_restore_app_result() throw();
  configuration_create_app_response success;

  _admin_client_restore_app_result__isset __isset;

  void __set_success(const configuration_create_app_response& val);

  bool operator == (const admin_client_restore_app_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_restore_app_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_restore_app_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_restore_app_presult__isset {
  _admin_client_restore_app_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_restore_app_presult__isset;

class admin_client_restore_app_presult {
 public:


  virtual ~admin_client_restore_app_presult() throw();
  configuration_create_app_response* success;

  _admin_client_restore_app_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_start_partition_split_args__isset {
  _admin_client_start_partition_split_args__isset() : req(false) {}
  bool req :1;
} _admin_client_start_partition_split_args__isset;

class admin_client_start_partition_split_args {
 public:

  admin_client_start_partition_split_args(const admin_client_start_partition_split_args&);
  admin_client_start_partition_split_args& operator=(const admin_client_start_partition_split_args&);
  admin_client_start_partition_split_args() {
  }

  virtual ~admin_client_start_partition_split_args() throw();
   ::dsn::replication::start_partition_split_request req;

  _admin_client_start_partition_split_args__isset __isset;

  void __set_req(const  ::dsn::replication::start_partition_split_request& val);

  bool operator == (const admin_client_start_partition_split_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_start_partition_split_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_start_partition_split_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_start_partition_split_pargs {
 public:


  virtual ~admin_client_start_partition_split_pargs() throw();
  const  ::dsn::replication::start_partition_split_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_start_partition_split_result__isset {
  _admin_client_start_partition_split_result__isset() : success(false) {}
  bool success :1;
} _admin_client_start_partition_split_result__isset;

class admin_client_start_partition_split_result {
 public:

  admin_client_start_partition_split_result(const admin_client_start_partition_split_result&);
  admin_client_start_partition_split_result& operator=(const admin_client_start_partition_split_result&);
  admin_client_start_partition_split_result() {
  }

  virtual ~admin_client_start_partition_split_result() throw();
   ::dsn::replication::start_partition_split_response success;

  _admin_client_start_partition_split_result__isset __isset;

  void __set_success(const  ::dsn::replication::start_partition_split_response& val);

  bool operator == (const admin_client_start_partition_split_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_start_partition_split_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_start_partition_split_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_start_partition_split_presult__isset {
  _admin_client_start_partition_split_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_start_partition_split_presult__isset;

class admin_client_start_partition_split_presult {
 public:


  virtual ~admin_client_start_partition_split_presult() throw();
   ::dsn::replication::start_partition_split_response* success;

  _admin_client_start_partition_split_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_query_split_status_args__isset {
  _admin_client_query_split_status_args__isset() : req(false) {}
  bool req :1;
} _admin_client_query_split_status_args__isset;

class admin_client_query_split_status_args {
 public:

  admin_client_query_split_status_args(const admin_client_query_split_status_args&);
  admin_client_query_split_status_args& operator=(const admin_client_query_split_status_args&);
  admin_client_query_split_status_args() {
  }

  virtual ~admin_client_query_split_status_args() throw();
   ::dsn::replication::query_split_request req;

  _admin_client_query_split_status_args__isset __isset;

  void __set_req(const  ::dsn::replication::query_split_request& val);

  bool operator == (const admin_client_query_split_status_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_split_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_split_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_query_split_status_pargs {
 public:


  virtual ~admin_client_query_split_status_pargs() throw();
  const  ::dsn::replication::query_split_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_split_status_result__isset {
  _admin_client_query_split_status_result__isset() : success(false) {}
  bool success :1;
} _admin_client_query_split_status_result__isset;

class admin_client_query_split_status_result {
 public:

  admin_client_query_split_status_result(const admin_client_query_split_status_result&);
  admin_client_query_split_status_result& operator=(const admin_client_query_split_status_result&);
  admin_client_query_split_status_result() {
  }

  virtual ~admin_client_query_split_status_result() throw();
   ::dsn::replication::query_split_response success;

  _admin_client_query_split_status_result__isset __isset;

  void __set_success(const  ::dsn::replication::query_split_response& val);

  bool operator == (const admin_client_query_split_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_split_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_split_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_split_status_presult__isset {
  _admin_client_query_split_status_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_query_split_status_presult__isset;

class admin_client_query_split_status_presult {
 public:


  virtual ~admin_client_query_split_status_presult() throw();
   ::dsn::replication::query_split_response* success;

  _admin_client_query_split_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_control_partition_split_args__isset {
  _admin_client_control_partition_split_args__isset() : req(false) {}
  bool req :1;
} _admin_client_control_partition_split_args__isset;

class admin_client_control_partition_split_args {
 public:

  admin_client_control_partition_split_args(const admin_client_control_partition_split_args&);
  admin_client_control_partition_split_args& operator=(const admin_client_control_partition_split_args&);
  admin_client_control_partition_split_args() {
  }

  virtual ~admin_client_control_partition_split_args() throw();
   ::dsn::replication::control_split_request req;

  _admin_client_control_partition_split_args__isset __isset;

  void __set_req(const  ::dsn::replication::control_split_request& val);

  bool operator == (const admin_client_control_partition_split_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_control_partition_split_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_control_partition_split_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_control_partition_split_pargs {
 public:


  virtual ~admin_client_control_partition_split_pargs() throw();
  const  ::dsn::replication::control_split_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_control_partition_split_result__isset {
  _admin_client_control_partition_split_result__isset() : success(false) {}
  bool success :1;
} _admin_client_control_partition_split_result__isset;

class admin_client_control_partition_split_result {
 public:

  admin_client_control_partition_split_result(const admin_client_control_partition_split_result&);
  admin_client_control_partition_split_result& operator=(const admin_client_control_partition_split_result&);
  admin_client_control_partition_split_result() {
  }

  virtual ~admin_client_control_partition_split_result() throw();
   ::dsn::replication::control_split_response success;

  _admin_client_control_partition_split_result__isset __isset;

  void __set_success(const  ::dsn::replication::control_split_response& val);

  bool operator == (const admin_client_control_partition_split_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_control_partition_split_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_control_partition_split_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_control_partition_split_presult__isset {
  _admin_client_control_partition_split_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_control_partition_split_presult__isset;

class admin_client_control_partition_split_presult {
 public:


  virtual ~admin_client_control_partition_split_presult() throw();
   ::dsn::replication::control_split_response* success;

  _admin_client_control_partition_split_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_start_bulk_load_args__isset {
  _admin_client_start_bulk_load_args__isset() : req(false) {}
  bool req :1;
} _admin_client_start_bulk_load_args__isset;

class admin_client_start_bulk_load_args {
 public:

  admin_client_start_bulk_load_args(const admin_client_start_bulk_load_args&);
  admin_client_start_bulk_load_args& operator=(const admin_client_start_bulk_load_args&);
  admin_client_start_bulk_load_args() {
  }

  virtual ~admin_client_start_bulk_load_args() throw();
   ::dsn::replication::start_bulk_load_request req;

  _admin_client_start_bulk_load_args__isset __isset;

  void __set_req(const  ::dsn::replication::start_bulk_load_request& val);

  bool operator == (const admin_client_start_bulk_load_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_start_bulk_load_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_start_bulk_load_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_start_bulk_load_pargs {
 public:


  virtual ~admin_client_start_bulk_load_pargs() throw();
  const  ::dsn::replication::start_bulk_load_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_start_bulk_load_result__isset {
  _admin_client_start_bulk_load_result__isset() : success(false) {}
  bool success :1;
} _admin_client_start_bulk_load_result__isset;

class admin_client_start_bulk_load_result {
 public:

  admin_client_start_bulk_load_result(const admin_client_start_bulk_load_result&);
  admin_client_start_bulk_load_result& operator=(const admin_client_start_bulk_load_result&);
  admin_client_start_bulk_load_result() {
  }

  virtual ~admin_client_start_bulk_load_result() throw();
   ::dsn::replication::start_bulk_load_response success;

  _admin_client_start_bulk_load_result__isset __isset;

  void __set_success(const  ::dsn::replication::start_bulk_load_response& val);

  bool operator == (const admin_client_start_bulk_load_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_start_bulk_load_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_start_bulk_load_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_start_bulk_load_presult__isset {
  _admin_client_start_bulk_load_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_start_bulk_load_presult__isset;

class admin_client_start_bulk_load_presult {
 public:


  virtual ~admin_client_start_bulk_load_presult() throw();
   ::dsn::replication::start_bulk_load_response* success;

  _admin_client_start_bulk_load_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_query_bulk_load_status_args__isset {
  _admin_client_query_bulk_load_status_args__isset() : req(false) {}
  bool req :1;
} _admin_client_query_bulk_load_status_args__isset;

class admin_client_query_bulk_load_status_args {
 public:

  admin_client_query_bulk_load_status_args(const admin_client_query_bulk_load_status_args&);
  admin_client_query_bulk_load_status_args& operator=(const admin_client_query_bulk_load_status_args&);
  admin_client_query_bulk_load_status_args() {
  }

  virtual ~admin_client_query_bulk_load_status_args() throw();
   ::dsn::replication::query_bulk_load_request req;

  _admin_client_query_bulk_load_status_args__isset __isset;

  void __set_req(const  ::dsn::replication::query_bulk_load_request& val);

  bool operator == (const admin_client_query_bulk_load_status_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_bulk_load_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_bulk_load_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_query_bulk_load_status_pargs {
 public:


  virtual ~admin_client_query_bulk_load_status_pargs() throw();
  const  ::dsn::replication::query_bulk_load_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_bulk_load_status_result__isset {
  _admin_client_query_bulk_load_status_result__isset() : success(false) {}
  bool success :1;
} _admin_client_query_bulk_load_status_result__isset;

class admin_client_query_bulk_load_status_result {
 public:

  admin_client_query_bulk_load_status_result(const admin_client_query_bulk_load_status_result&);
  admin_client_query_bulk_load_status_result& operator=(const admin_client_query_bulk_load_status_result&);
  admin_client_query_bulk_load_status_result() {
  }

  virtual ~admin_client_query_bulk_load_status_result() throw();
   ::dsn::replication::query_bulk_load_response success;

  _admin_client_query_bulk_load_status_result__isset __isset;

  void __set_success(const  ::dsn::replication::query_bulk_load_response& val);

  bool operator == (const admin_client_query_bulk_load_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_bulk_load_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_bulk_load_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_bulk_load_status_presult__isset {
  _admin_client_query_bulk_load_status_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_query_bulk_load_status_presult__isset;

class admin_client_query_bulk_load_status_presult {
 public:


  virtual ~admin_client_query_bulk_load_status_presult() throw();
   ::dsn::replication::query_bulk_load_response* success;

  _admin_client_query_bulk_load_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_control_bulk_load_args__isset {
  _admin_client_control_bulk_load_args__isset() : req(false) {}
  bool req :1;
} _admin_client_control_bulk_load_args__isset;

class admin_client_control_bulk_load_args {
 public:

  admin_client_control_bulk_load_args(const admin_client_control_bulk_load_args&);
  admin_client_control_bulk_load_args& operator=(const admin_client_control_bulk_load_args&);
  admin_client_control_bulk_load_args() {
  }

  virtual ~admin_client_control_bulk_load_args() throw();
   ::dsn::replication::control_bulk_load_request req;

  _admin_client_control_bulk_load_args__isset __isset;

  void __set_req(const  ::dsn::replication::control_bulk_load_request& val);

  bool operator == (const admin_client_control_bulk_load_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_control_bulk_load_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_control_bulk_load_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_control_bulk_load_pargs {
 public:


  virtual ~admin_client_control_bulk_load_pargs() throw();
  const  ::dsn::replication::control_bulk_load_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_control_bulk_load_result__isset {
  _admin_client_control_bulk_load_result__isset() : success(false) {}
  bool success :1;
} _admin_client_control_bulk_load_result__isset;

class admin_client_control_bulk_load_result {
 public:

  admin_client_control_bulk_load_result(const admin_client_control_bulk_load_result&);
  admin_client_control_bulk_load_result& operator=(const admin_client_control_bulk_load_result&);
  admin_client_control_bulk_load_result() {
  }

  virtual ~admin_client_control_bulk_load_result() throw();
   ::dsn::replication::control_bulk_load_response success;

  _admin_client_control_bulk_load_result__isset __isset;

  void __set_success(const  ::dsn::replication::control_bulk_load_response& val);

  bool operator == (const admin_client_control_bulk_load_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_control_bulk_load_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_control_bulk_load_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_control_bulk_load_presult__isset {
  _admin_client_control_bulk_load_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_control_bulk_load_presult__isset;

class admin_client_control_bulk_load_presult {
 public:


  virtual ~admin_client_control_bulk_load_presult() throw();
   ::dsn::replication::control_bulk_load_response* success;

  _admin_client_control_bulk_load_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_clear_bulk_load_args__isset {
  _admin_client_clear_bulk_load_args__isset() : req(false) {}
  bool req :1;
} _admin_client_clear_bulk_load_args__isset;

class admin_client_clear_bulk_load_args {
 public:

  admin_client_clear_bulk_load_args(const admin_client_clear_bulk_load_args&);
  admin_client_clear_bulk_load_args& operator=(const admin_client_clear_bulk_load_args&);
  admin_client_clear_bulk_load_args() {
  }

  virtual ~admin_client_clear_bulk_load_args() throw();
   ::dsn::replication::clear_bulk_load_state_request req;

  _admin_client_clear_bulk_load_args__isset __isset;

  void __set_req(const  ::dsn::replication::clear_bulk_load_state_request& val);

  bool operator == (const admin_client_clear_bulk_load_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_clear_bulk_load_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_clear_bulk_load_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_clear_bulk_load_pargs {
 public:


  virtual ~admin_client_clear_bulk_load_pargs() throw();
  const  ::dsn::replication::clear_bulk_load_state_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_clear_bulk_load_result__isset {
  _admin_client_clear_bulk_load_result__isset() : success(false) {}
  bool success :1;
} _admin_client_clear_bulk_load_result__isset;

class admin_client_clear_bulk_load_result {
 public:

  admin_client_clear_bulk_load_result(const admin_client_clear_bulk_load_result&);
  admin_client_clear_bulk_load_result& operator=(const admin_client_clear_bulk_load_result&);
  admin_client_clear_bulk_load_result() {
  }

  virtual ~admin_client_clear_bulk_load_result() throw();
   ::dsn::replication::clear_bulk_load_state_response success;

  _admin_client_clear_bulk_load_result__isset __isset;

  void __set_success(const  ::dsn::replication::clear_bulk_load_state_response& val);

  bool operator == (const admin_client_clear_bulk_load_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_clear_bulk_load_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_clear_bulk_load_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_clear_bulk_load_presult__isset {
  _admin_client_clear_bulk_load_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_clear_bulk_load_presult__isset;

class admin_client_clear_bulk_load_presult {
 public:


  virtual ~admin_client_clear_bulk_load_presult() throw();
   ::dsn::replication::clear_bulk_load_state_response* success;

  _admin_client_clear_bulk_load_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_start_manual_compact_args__isset {
  _admin_client_start_manual_compact_args__isset() : req(false) {}
  bool req :1;
} _admin_client_start_manual_compact_args__isset;

class admin_client_start_manual_compact_args {
 public:

  admin_client_start_manual_compact_args(const admin_client_start_manual_compact_args&);
  admin_client_start_manual_compact_args& operator=(const admin_client_start_manual_compact_args&);
  admin_client_start_manual_compact_args() {
  }

  virtual ~admin_client_start_manual_compact_args() throw();
  start_app_manual_compact_request req;

  _admin_client_start_manual_compact_args__isset __isset;

  void __set_req(const start_app_manual_compact_request& val);

  bool operator == (const admin_client_start_manual_compact_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_start_manual_compact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_start_manual_compact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_start_manual_compact_pargs {
 public:


  virtual ~admin_client_start_manual_compact_pargs() throw();
  const start_app_manual_compact_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_start_manual_compact_result__isset {
  _admin_client_start_manual_compact_result__isset() : success(false) {}
  bool success :1;
} _admin_client_start_manual_compact_result__isset;

class admin_client_start_manual_compact_result {
 public:

  admin_client_start_manual_compact_result(const admin_client_start_manual_compact_result&);
  admin_client_start_manual_compact_result& operator=(const admin_client_start_manual_compact_result&);
  admin_client_start_manual_compact_result() {
  }

  virtual ~admin_client_start_manual_compact_result() throw();
  start_app_manual_compact_response success;

  _admin_client_start_manual_compact_result__isset __isset;

  void __set_success(const start_app_manual_compact_response& val);

  bool operator == (const admin_client_start_manual_compact_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_start_manual_compact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_start_manual_compact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_start_manual_compact_presult__isset {
  _admin_client_start_manual_compact_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_start_manual_compact_presult__isset;

class admin_client_start_manual_compact_presult {
 public:


  virtual ~admin_client_start_manual_compact_presult() throw();
  start_app_manual_compact_response* success;

  _admin_client_start_manual_compact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _admin_client_query_manual_compact_args__isset {
  _admin_client_query_manual_compact_args__isset() : req(false) {}
  bool req :1;
} _admin_client_query_manual_compact_args__isset;

class admin_client_query_manual_compact_args {
 public:

  admin_client_query_manual_compact_args(const admin_client_query_manual_compact_args&);
  admin_client_query_manual_compact_args& operator=(const admin_client_query_manual_compact_args&);
  admin_client_query_manual_compact_args() {
  }

  virtual ~admin_client_query_manual_compact_args() throw();
  query_app_manual_compact_request req;

  _admin_client_query_manual_compact_args__isset __isset;

  void __set_req(const query_app_manual_compact_request& val);

  bool operator == (const admin_client_query_manual_compact_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_manual_compact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_manual_compact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class admin_client_query_manual_compact_pargs {
 public:


  virtual ~admin_client_query_manual_compact_pargs() throw();
  const query_app_manual_compact_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_manual_compact_result__isset {
  _admin_client_query_manual_compact_result__isset() : success(false) {}
  bool success :1;
} _admin_client_query_manual_compact_result__isset;

class admin_client_query_manual_compact_result {
 public:

  admin_client_query_manual_compact_result(const admin_client_query_manual_compact_result&);
  admin_client_query_manual_compact_result& operator=(const admin_client_query_manual_compact_result&);
  admin_client_query_manual_compact_result() {
  }

  virtual ~admin_client_query_manual_compact_result() throw();
  query_app_manual_compact_response success;

  _admin_client_query_manual_compact_result__isset __isset;

  void __set_success(const query_app_manual_compact_response& val);

  bool operator == (const admin_client_query_manual_compact_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const admin_client_query_manual_compact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const admin_client_query_manual_compact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _admin_client_query_manual_compact_presult__isset {
  _admin_client_query_manual_compact_presult__isset() : success(false) {}
  bool success :1;
} _admin_client_query_manual_compact_presult__isset;

class admin_client_query_manual_compact_presult {
 public:


  virtual ~admin_client_query_manual_compact_presult() throw();
  query_app_manual_compact_response* success;

  _admin_client_query_manual_compact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class admin_clientClient : virtual public admin_clientIf {
 public:
  admin_clientClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  admin_clientClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void create_app(configuration_create_app_response& _return, const configuration_create_app_request& req);
  void send_create_app(const configuration_create_app_request& req);
  void recv_create_app(configuration_create_app_response& _return);
  void drop_app(configuration_drop_app_response& _return, const configuration_drop_app_request& req);
  void send_drop_app(const configuration_drop_app_request& req);
  void recv_drop_app(configuration_drop_app_response& _return);
  void recall_app(configuration_recall_app_response& _return, const configuration_recall_app_request& req);
  void send_recall_app(const configuration_recall_app_request& req);
  void recv_recall_app(configuration_recall_app_response& _return);
  void list_apps(configuration_list_apps_response& _return, const configuration_list_apps_request& req);
  void send_list_apps(const configuration_list_apps_request& req);
  void recv_list_apps(configuration_list_apps_response& _return);
  void add_duplication( ::dsn::replication::duplication_add_response& _return, const  ::dsn::replication::duplication_add_request& req);
  void send_add_duplication(const  ::dsn::replication::duplication_add_request& req);
  void recv_add_duplication( ::dsn::replication::duplication_add_response& _return);
  void query_duplication( ::dsn::replication::duplication_query_response& _return, const  ::dsn::replication::duplication_query_request& req);
  void send_query_duplication(const  ::dsn::replication::duplication_query_request& req);
  void recv_query_duplication( ::dsn::replication::duplication_query_response& _return);
  void modify_duplication( ::dsn::replication::duplication_modify_response& _return, const  ::dsn::replication::duplication_modify_request& req);
  void send_modify_duplication(const  ::dsn::replication::duplication_modify_request& req);
  void recv_modify_duplication( ::dsn::replication::duplication_modify_response& _return);
  void query_app_info(query_app_info_response& _return, const query_app_info_request& req);
  void send_query_app_info(const query_app_info_request& req);
  void recv_query_app_info(query_app_info_response& _return);
  void update_app_env(configuration_update_app_env_response& _return, const configuration_update_app_env_request& req);
  void send_update_app_env(const configuration_update_app_env_request& req);
  void recv_update_app_env(configuration_update_app_env_response& _return);
  void list_nodes(configuration_list_nodes_response& _return, const configuration_list_nodes_request& req);
  void send_list_nodes(const configuration_list_nodes_request& req);
  void recv_list_nodes(configuration_list_nodes_response& _return);
  void query_cluster_info(configuration_cluster_info_response& _return, const configuration_cluster_info_request& req);
  void send_query_cluster_info(const configuration_cluster_info_request& req);
  void recv_query_cluster_info(configuration_cluster_info_response& _return);
  void meta_control(configuration_meta_control_response& _return, const configuration_meta_control_request& req);
  void send_meta_control(const configuration_meta_control_request& req);
  void recv_meta_control(configuration_meta_control_response& _return);
  void query_backup_policy( ::dsn::replication::configuration_query_backup_policy_response& _return, const  ::dsn::replication::configuration_query_backup_policy_request& req);
  void send_query_backup_policy(const  ::dsn::replication::configuration_query_backup_policy_request& req);
  void recv_query_backup_policy( ::dsn::replication::configuration_query_backup_policy_response& _return);
  void balance(configuration_balancer_response& _return, const configuration_balancer_request& req);
  void send_balance(const configuration_balancer_request& req);
  void recv_balance(configuration_balancer_response& _return);
  void start_backup_app( ::dsn::replication::start_backup_app_response& _return, const  ::dsn::replication::start_backup_app_request& req);
  void send_start_backup_app(const  ::dsn::replication::start_backup_app_request& req);
  void recv_start_backup_app( ::dsn::replication::start_backup_app_response& _return);
  void query_backup_status( ::dsn::replication::query_backup_status_response& _return, const  ::dsn::replication::query_backup_status_request& req);
  void send_query_backup_status(const  ::dsn::replication::query_backup_status_request& req);
  void recv_query_backup_status( ::dsn::replication::query_backup_status_response& _return);
  void restore_app(configuration_create_app_response& _return, const  ::dsn::replication::configuration_restore_request& req);
  void send_restore_app(const  ::dsn::replication::configuration_restore_request& req);
  void recv_restore_app(configuration_create_app_response& _return);
  void start_partition_split( ::dsn::replication::start_partition_split_response& _return, const  ::dsn::replication::start_partition_split_request& req);
  void send_start_partition_split(const  ::dsn::replication::start_partition_split_request& req);
  void recv_start_partition_split( ::dsn::replication::start_partition_split_response& _return);
  void query_split_status( ::dsn::replication::query_split_response& _return, const  ::dsn::replication::query_split_request& req);
  void send_query_split_status(const  ::dsn::replication::query_split_request& req);
  void recv_query_split_status( ::dsn::replication::query_split_response& _return);
  void control_partition_split( ::dsn::replication::control_split_response& _return, const  ::dsn::replication::control_split_request& req);
  void send_control_partition_split(const  ::dsn::replication::control_split_request& req);
  void recv_control_partition_split( ::dsn::replication::control_split_response& _return);
  void start_bulk_load( ::dsn::replication::start_bulk_load_response& _return, const  ::dsn::replication::start_bulk_load_request& req);
  void send_start_bulk_load(const  ::dsn::replication::start_bulk_load_request& req);
  void recv_start_bulk_load( ::dsn::replication::start_bulk_load_response& _return);
  void query_bulk_load_status( ::dsn::replication::query_bulk_load_response& _return, const  ::dsn::replication::query_bulk_load_request& req);
  void send_query_bulk_load_status(const  ::dsn::replication::query_bulk_load_request& req);
  void recv_query_bulk_load_status( ::dsn::replication::query_bulk_load_response& _return);
  void control_bulk_load( ::dsn::replication::control_bulk_load_response& _return, const  ::dsn::replication::control_bulk_load_request& req);
  void send_control_bulk_load(const  ::dsn::replication::control_bulk_load_request& req);
  void recv_control_bulk_load( ::dsn::replication::control_bulk_load_response& _return);
  void clear_bulk_load( ::dsn::replication::clear_bulk_load_state_response& _return, const  ::dsn::replication::clear_bulk_load_state_request& req);
  void send_clear_bulk_load(const  ::dsn::replication::clear_bulk_load_state_request& req);
  void recv_clear_bulk_load( ::dsn::replication::clear_bulk_load_state_response& _return);
  void start_manual_compact(start_app_manual_compact_response& _return, const start_app_manual_compact_request& req);
  void send_start_manual_compact(const start_app_manual_compact_request& req);
  void recv_start_manual_compact(start_app_manual_compact_response& _return);
  void query_manual_compact(query_app_manual_compact_response& _return, const query_app_manual_compact_request& req);
  void send_query_manual_compact(const query_app_manual_compact_request& req);
  void recv_query_manual_compact(query_app_manual_compact_response& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class admin_clientProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<admin_clientIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (admin_clientProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_create_app(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_drop_app(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recall_app(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_list_apps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_duplication(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_duplication(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modify_duplication(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_app_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_app_env(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_list_nodes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_cluster_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_meta_control(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_backup_policy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_balance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_backup_app(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_backup_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_restore_app(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_partition_split(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_split_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_control_partition_split(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_bulk_load(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_bulk_load_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_control_bulk_load(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear_bulk_load(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_manual_compact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_manual_compact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  admin_clientProcessor(boost::shared_ptr<admin_clientIf> iface) :
    iface_(iface) {
    processMap_["create_app"] = &admin_clientProcessor::process_create_app;
    processMap_["drop_app"] = &admin_clientProcessor::process_drop_app;
    processMap_["recall_app"] = &admin_clientProcessor::process_recall_app;
    processMap_["list_apps"] = &admin_clientProcessor::process_list_apps;
    processMap_["add_duplication"] = &admin_clientProcessor::process_add_duplication;
    processMap_["query_duplication"] = &admin_clientProcessor::process_query_duplication;
    processMap_["modify_duplication"] = &admin_clientProcessor::process_modify_duplication;
    processMap_["query_app_info"] = &admin_clientProcessor::process_query_app_info;
    processMap_["update_app_env"] = &admin_clientProcessor::process_update_app_env;
    processMap_["list_nodes"] = &admin_clientProcessor::process_list_nodes;
    processMap_["query_cluster_info"] = &admin_clientProcessor::process_query_cluster_info;
    processMap_["meta_control"] = &admin_clientProcessor::process_meta_control;
    processMap_["query_backup_policy"] = &admin_clientProcessor::process_query_backup_policy;
    processMap_["balance"] = &admin_clientProcessor::process_balance;
    processMap_["start_backup_app"] = &admin_clientProcessor::process_start_backup_app;
    processMap_["query_backup_status"] = &admin_clientProcessor::process_query_backup_status;
    processMap_["restore_app"] = &admin_clientProcessor::process_restore_app;
    processMap_["start_partition_split"] = &admin_clientProcessor::process_start_partition_split;
    processMap_["query_split_status"] = &admin_clientProcessor::process_query_split_status;
    processMap_["control_partition_split"] = &admin_clientProcessor::process_control_partition_split;
    processMap_["start_bulk_load"] = &admin_clientProcessor::process_start_bulk_load;
    processMap_["query_bulk_load_status"] = &admin_clientProcessor::process_query_bulk_load_status;
    processMap_["control_bulk_load"] = &admin_clientProcessor::process_control_bulk_load;
    processMap_["clear_bulk_load"] = &admin_clientProcessor::process_clear_bulk_load;
    processMap_["start_manual_compact"] = &admin_clientProcessor::process_start_manual_compact;
    processMap_["query_manual_compact"] = &admin_clientProcessor::process_query_manual_compact;
  }

  virtual ~admin_clientProcessor() {}
};

class admin_clientProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  admin_clientProcessorFactory(const ::boost::shared_ptr< admin_clientIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< admin_clientIfFactory > handlerFactory_;
};

class admin_clientMultiface : virtual public admin_clientIf {
 public:
  admin_clientMultiface(std::vector<boost::shared_ptr<admin_clientIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~admin_clientMultiface() {}
 protected:
  std::vector<boost::shared_ptr<admin_clientIf> > ifaces_;
  admin_clientMultiface() {}
  void add(boost::shared_ptr<admin_clientIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void create_app(configuration_create_app_response& _return, const configuration_create_app_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_app(_return, req);
    }
    ifaces_[i]->create_app(_return, req);
    return;
  }

  void drop_app(configuration_drop_app_response& _return, const configuration_drop_app_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->drop_app(_return, req);
    }
    ifaces_[i]->drop_app(_return, req);
    return;
  }

  void recall_app(configuration_recall_app_response& _return, const configuration_recall_app_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recall_app(_return, req);
    }
    ifaces_[i]->recall_app(_return, req);
    return;
  }

  void list_apps(configuration_list_apps_response& _return, const configuration_list_apps_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->list_apps(_return, req);
    }
    ifaces_[i]->list_apps(_return, req);
    return;
  }

  void add_duplication( ::dsn::replication::duplication_add_response& _return, const  ::dsn::replication::duplication_add_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_duplication(_return, req);
    }
    ifaces_[i]->add_duplication(_return, req);
    return;
  }

  void query_duplication( ::dsn::replication::duplication_query_response& _return, const  ::dsn::replication::duplication_query_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_duplication(_return, req);
    }
    ifaces_[i]->query_duplication(_return, req);
    return;
  }

  void modify_duplication( ::dsn::replication::duplication_modify_response& _return, const  ::dsn::replication::duplication_modify_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modify_duplication(_return, req);
    }
    ifaces_[i]->modify_duplication(_return, req);
    return;
  }

  void query_app_info(query_app_info_response& _return, const query_app_info_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_app_info(_return, req);
    }
    ifaces_[i]->query_app_info(_return, req);
    return;
  }

  void update_app_env(configuration_update_app_env_response& _return, const configuration_update_app_env_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_app_env(_return, req);
    }
    ifaces_[i]->update_app_env(_return, req);
    return;
  }

  void list_nodes(configuration_list_nodes_response& _return, const configuration_list_nodes_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->list_nodes(_return, req);
    }
    ifaces_[i]->list_nodes(_return, req);
    return;
  }

  void query_cluster_info(configuration_cluster_info_response& _return, const configuration_cluster_info_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_cluster_info(_return, req);
    }
    ifaces_[i]->query_cluster_info(_return, req);
    return;
  }

  void meta_control(configuration_meta_control_response& _return, const configuration_meta_control_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->meta_control(_return, req);
    }
    ifaces_[i]->meta_control(_return, req);
    return;
  }

  void query_backup_policy( ::dsn::replication::configuration_query_backup_policy_response& _return, const  ::dsn::replication::configuration_query_backup_policy_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_backup_policy(_return, req);
    }
    ifaces_[i]->query_backup_policy(_return, req);
    return;
  }

  void balance(configuration_balancer_response& _return, const configuration_balancer_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->balance(_return, req);
    }
    ifaces_[i]->balance(_return, req);
    return;
  }

  void start_backup_app( ::dsn::replication::start_backup_app_response& _return, const  ::dsn::replication::start_backup_app_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_backup_app(_return, req);
    }
    ifaces_[i]->start_backup_app(_return, req);
    return;
  }

  void query_backup_status( ::dsn::replication::query_backup_status_response& _return, const  ::dsn::replication::query_backup_status_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_backup_status(_return, req);
    }
    ifaces_[i]->query_backup_status(_return, req);
    return;
  }

  void restore_app(configuration_create_app_response& _return, const  ::dsn::replication::configuration_restore_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->restore_app(_return, req);
    }
    ifaces_[i]->restore_app(_return, req);
    return;
  }

  void start_partition_split( ::dsn::replication::start_partition_split_response& _return, const  ::dsn::replication::start_partition_split_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_partition_split(_return, req);
    }
    ifaces_[i]->start_partition_split(_return, req);
    return;
  }

  void query_split_status( ::dsn::replication::query_split_response& _return, const  ::dsn::replication::query_split_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_split_status(_return, req);
    }
    ifaces_[i]->query_split_status(_return, req);
    return;
  }

  void control_partition_split( ::dsn::replication::control_split_response& _return, const  ::dsn::replication::control_split_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->control_partition_split(_return, req);
    }
    ifaces_[i]->control_partition_split(_return, req);
    return;
  }

  void start_bulk_load( ::dsn::replication::start_bulk_load_response& _return, const  ::dsn::replication::start_bulk_load_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_bulk_load(_return, req);
    }
    ifaces_[i]->start_bulk_load(_return, req);
    return;
  }

  void query_bulk_load_status( ::dsn::replication::query_bulk_load_response& _return, const  ::dsn::replication::query_bulk_load_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_bulk_load_status(_return, req);
    }
    ifaces_[i]->query_bulk_load_status(_return, req);
    return;
  }

  void control_bulk_load( ::dsn::replication::control_bulk_load_response& _return, const  ::dsn::replication::control_bulk_load_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->control_bulk_load(_return, req);
    }
    ifaces_[i]->control_bulk_load(_return, req);
    return;
  }

  void clear_bulk_load( ::dsn::replication::clear_bulk_load_state_response& _return, const  ::dsn::replication::clear_bulk_load_state_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clear_bulk_load(_return, req);
    }
    ifaces_[i]->clear_bulk_load(_return, req);
    return;
  }

  void start_manual_compact(start_app_manual_compact_response& _return, const start_app_manual_compact_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_manual_compact(_return, req);
    }
    ifaces_[i]->start_manual_compact(_return, req);
    return;
  }

  void query_manual_compact(query_app_manual_compact_response& _return, const query_app_manual_compact_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_manual_compact(_return, req);
    }
    ifaces_[i]->query_manual_compact(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class admin_clientConcurrentClient : virtual public admin_clientIf {
 public:
  admin_clientConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  admin_clientConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void create_app(configuration_create_app_response& _return, const configuration_create_app_request& req);
  int32_t send_create_app(const configuration_create_app_request& req);
  void recv_create_app(configuration_create_app_response& _return, const int32_t seqid);
  void drop_app(configuration_drop_app_response& _return, const configuration_drop_app_request& req);
  int32_t send_drop_app(const configuration_drop_app_request& req);
  void recv_drop_app(configuration_drop_app_response& _return, const int32_t seqid);
  void recall_app(configuration_recall_app_response& _return, const configuration_recall_app_request& req);
  int32_t send_recall_app(const configuration_recall_app_request& req);
  void recv_recall_app(configuration_recall_app_response& _return, const int32_t seqid);
  void list_apps(configuration_list_apps_response& _return, const configuration_list_apps_request& req);
  int32_t send_list_apps(const configuration_list_apps_request& req);
  void recv_list_apps(configuration_list_apps_response& _return, const int32_t seqid);
  void add_duplication( ::dsn::replication::duplication_add_response& _return, const  ::dsn::replication::duplication_add_request& req);
  int32_t send_add_duplication(const  ::dsn::replication::duplication_add_request& req);
  void recv_add_duplication( ::dsn::replication::duplication_add_response& _return, const int32_t seqid);
  void query_duplication( ::dsn::replication::duplication_query_response& _return, const  ::dsn::replication::duplication_query_request& req);
  int32_t send_query_duplication(const  ::dsn::replication::duplication_query_request& req);
  void recv_query_duplication( ::dsn::replication::duplication_query_response& _return, const int32_t seqid);
  void modify_duplication( ::dsn::replication::duplication_modify_response& _return, const  ::dsn::replication::duplication_modify_request& req);
  int32_t send_modify_duplication(const  ::dsn::replication::duplication_modify_request& req);
  void recv_modify_duplication( ::dsn::replication::duplication_modify_response& _return, const int32_t seqid);
  void query_app_info(query_app_info_response& _return, const query_app_info_request& req);
  int32_t send_query_app_info(const query_app_info_request& req);
  void recv_query_app_info(query_app_info_response& _return, const int32_t seqid);
  void update_app_env(configuration_update_app_env_response& _return, const configuration_update_app_env_request& req);
  int32_t send_update_app_env(const configuration_update_app_env_request& req);
  void recv_update_app_env(configuration_update_app_env_response& _return, const int32_t seqid);
  void list_nodes(configuration_list_nodes_response& _return, const configuration_list_nodes_request& req);
  int32_t send_list_nodes(const configuration_list_nodes_request& req);
  void recv_list_nodes(configuration_list_nodes_response& _return, const int32_t seqid);
  void query_cluster_info(configuration_cluster_info_response& _return, const configuration_cluster_info_request& req);
  int32_t send_query_cluster_info(const configuration_cluster_info_request& req);
  void recv_query_cluster_info(configuration_cluster_info_response& _return, const int32_t seqid);
  void meta_control(configuration_meta_control_response& _return, const configuration_meta_control_request& req);
  int32_t send_meta_control(const configuration_meta_control_request& req);
  void recv_meta_control(configuration_meta_control_response& _return, const int32_t seqid);
  void query_backup_policy( ::dsn::replication::configuration_query_backup_policy_response& _return, const  ::dsn::replication::configuration_query_backup_policy_request& req);
  int32_t send_query_backup_policy(const  ::dsn::replication::configuration_query_backup_policy_request& req);
  void recv_query_backup_policy( ::dsn::replication::configuration_query_backup_policy_response& _return, const int32_t seqid);
  void balance(configuration_balancer_response& _return, const configuration_balancer_request& req);
  int32_t send_balance(const configuration_balancer_request& req);
  void recv_balance(configuration_balancer_response& _return, const int32_t seqid);
  void start_backup_app( ::dsn::replication::start_backup_app_response& _return, const  ::dsn::replication::start_backup_app_request& req);
  int32_t send_start_backup_app(const  ::dsn::replication::start_backup_app_request& req);
  void recv_start_backup_app( ::dsn::replication::start_backup_app_response& _return, const int32_t seqid);
  void query_backup_status( ::dsn::replication::query_backup_status_response& _return, const  ::dsn::replication::query_backup_status_request& req);
  int32_t send_query_backup_status(const  ::dsn::replication::query_backup_status_request& req);
  void recv_query_backup_status( ::dsn::replication::query_backup_status_response& _return, const int32_t seqid);
  void restore_app(configuration_create_app_response& _return, const  ::dsn::replication::configuration_restore_request& req);
  int32_t send_restore_app(const  ::dsn::replication::configuration_restore_request& req);
  void recv_restore_app(configuration_create_app_response& _return, const int32_t seqid);
  void start_partition_split( ::dsn::replication::start_partition_split_response& _return, const  ::dsn::replication::start_partition_split_request& req);
  int32_t send_start_partition_split(const  ::dsn::replication::start_partition_split_request& req);
  void recv_start_partition_split( ::dsn::replication::start_partition_split_response& _return, const int32_t seqid);
  void query_split_status( ::dsn::replication::query_split_response& _return, const  ::dsn::replication::query_split_request& req);
  int32_t send_query_split_status(const  ::dsn::replication::query_split_request& req);
  void recv_query_split_status( ::dsn::replication::query_split_response& _return, const int32_t seqid);
  void control_partition_split( ::dsn::replication::control_split_response& _return, const  ::dsn::replication::control_split_request& req);
  int32_t send_control_partition_split(const  ::dsn::replication::control_split_request& req);
  void recv_control_partition_split( ::dsn::replication::control_split_response& _return, const int32_t seqid);
  void start_bulk_load( ::dsn::replication::start_bulk_load_response& _return, const  ::dsn::replication::start_bulk_load_request& req);
  int32_t send_start_bulk_load(const  ::dsn::replication::start_bulk_load_request& req);
  void recv_start_bulk_load( ::dsn::replication::start_bulk_load_response& _return, const int32_t seqid);
  void query_bulk_load_status( ::dsn::replication::query_bulk_load_response& _return, const  ::dsn::replication::query_bulk_load_request& req);
  int32_t send_query_bulk_load_status(const  ::dsn::replication::query_bulk_load_request& req);
  void recv_query_bulk_load_status( ::dsn::replication::query_bulk_load_response& _return, const int32_t seqid);
  void control_bulk_load( ::dsn::replication::control_bulk_load_response& _return, const  ::dsn::replication::control_bulk_load_request& req);
  int32_t send_control_bulk_load(const  ::dsn::replication::control_bulk_load_request& req);
  void recv_control_bulk_load( ::dsn::replication::control_bulk_load_response& _return, const int32_t seqid);
  void clear_bulk_load( ::dsn::replication::clear_bulk_load_state_response& _return, const  ::dsn::replication::clear_bulk_load_state_request& req);
  int32_t send_clear_bulk_load(const  ::dsn::replication::clear_bulk_load_state_request& req);
  void recv_clear_bulk_load( ::dsn::replication::clear_bulk_load_state_response& _return, const int32_t seqid);
  void start_manual_compact(start_app_manual_compact_response& _return, const start_app_manual_compact_request& req);
  int32_t send_start_manual_compact(const start_app_manual_compact_request& req);
  void recv_start_manual_compact(start_app_manual_compact_response& _return, const int32_t seqid);
  void query_manual_compact(query_app_manual_compact_response& _return, const query_app_manual_compact_request& req);
  int32_t send_query_manual_compact(const query_app_manual_compact_request& req);
  void recv_query_manual_compact(query_app_manual_compact_response& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
