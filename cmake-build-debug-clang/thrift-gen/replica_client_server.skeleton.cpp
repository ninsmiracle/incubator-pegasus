// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "replica_client.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::dsn::replication;

class replica_clientHandler : virtual public replica_clientIf {
 public:
  replica_clientHandler() {
    // Your initialization goes here
  }

  void query_disk_info(query_disk_info_response& _return, const query_disk_info_request& req) {
    // Your implementation goes here
    printf("query_disk_info\n");
  }

  void disk_migrate(replica_disk_migrate_response& _return, const replica_disk_migrate_request& req) {
    // Your implementation goes here
    printf("disk_migrate\n");
  }

  void add_disk(add_new_disk_response& _return, const add_new_disk_request& req) {
    // Your implementation goes here
    printf("add_disk\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<replica_clientHandler> handler(new replica_clientHandler());
  shared_ptr<TProcessor> processor(new replica_clientProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

