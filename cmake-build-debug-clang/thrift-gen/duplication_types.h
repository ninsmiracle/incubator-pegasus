/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef duplication_TYPES_H
#define duplication_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "dsn_types.h"
#include "dsn.layer2_types.h"


namespace dsn { namespace replication {

struct duplication_status {
  enum type {
    DS_INIT = 0,
    DS_PREPARE = 1,
    DS_APP = 2,
    DS_LOG = 3,
    DS_PAUSE = 4,
    DS_REMOVED = 5
  };
};

extern const std::map<int, const char*> _duplication_status_VALUES_TO_NAMES;

struct duplication_fail_mode {
  enum type {
    FAIL_SLOW = 0,
    FAIL_SKIP = 1,
    FAIL_FAST = 2
  };
};

extern const std::map<int, const char*> _duplication_fail_mode_VALUES_TO_NAMES;

class duplication_add_request;

class duplication_add_response;

class duplication_modify_request;

class duplication_modify_response;

class duplication_entry;

class duplication_query_request;

class duplication_query_response;

class duplication_confirm_entry;

class duplication_sync_request;

class duplication_sync_response;

typedef struct _duplication_add_request__isset {
  _duplication_add_request__isset() : app_name(false), remote_cluster_name(false), is_duplicating_checkpoint(true) {}
  bool app_name :1;
  bool remote_cluster_name :1;
  bool is_duplicating_checkpoint :1;
} _duplication_add_request__isset;

class duplication_add_request {
 public:

  duplication_add_request(const duplication_add_request&);
  duplication_add_request& operator=(const duplication_add_request&);
  duplication_add_request() : app_name(), remote_cluster_name(), is_duplicating_checkpoint(true) {
  }

  virtual ~duplication_add_request() throw();
  std::string app_name;
  std::string remote_cluster_name;
  bool is_duplicating_checkpoint;

  _duplication_add_request__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_remote_cluster_name(const std::string& val);

  void __set_is_duplicating_checkpoint(const bool val);

  bool operator == (const duplication_add_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (!(remote_cluster_name == rhs.remote_cluster_name))
      return false;
    if (__isset.is_duplicating_checkpoint != rhs.__isset.is_duplicating_checkpoint)
      return false;
    else if (__isset.is_duplicating_checkpoint && !(is_duplicating_checkpoint == rhs.is_duplicating_checkpoint))
      return false;
    return true;
  }
  bool operator != (const duplication_add_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const duplication_add_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(duplication_add_request &a, duplication_add_request &b);

inline std::ostream& operator<<(std::ostream& out, const duplication_add_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _duplication_add_response__isset {
  _duplication_add_response__isset() : err(false), appid(false), dupid(false), hint(false) {}
  bool err :1;
  bool appid :1;
  bool dupid :1;
  bool hint :1;
} _duplication_add_response__isset;

class duplication_add_response {
 public:

  duplication_add_response(const duplication_add_response&);
  duplication_add_response& operator=(const duplication_add_response&);
  duplication_add_response() : appid(0), dupid(0), hint() {
  }

  virtual ~duplication_add_response() throw();
   ::dsn::error_code err;
  int32_t appid;
  int32_t dupid;
  std::string hint;

  _duplication_add_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_appid(const int32_t val);

  void __set_dupid(const int32_t val);

  void __set_hint(const std::string& val);

  bool operator == (const duplication_add_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(appid == rhs.appid))
      return false;
    if (!(dupid == rhs.dupid))
      return false;
    if (__isset.hint != rhs.__isset.hint)
      return false;
    else if (__isset.hint && !(hint == rhs.hint))
      return false;
    return true;
  }
  bool operator != (const duplication_add_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const duplication_add_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(duplication_add_response &a, duplication_add_response &b);

inline std::ostream& operator<<(std::ostream& out, const duplication_add_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _duplication_modify_request__isset {
  _duplication_modify_request__isset() : app_name(false), dupid(false), status(false), fail_mode(false) {}
  bool app_name :1;
  bool dupid :1;
  bool status :1;
  bool fail_mode :1;
} _duplication_modify_request__isset;

class duplication_modify_request {
 public:

  duplication_modify_request(const duplication_modify_request&);
  duplication_modify_request& operator=(const duplication_modify_request&);
  duplication_modify_request() : app_name(), dupid(0), status((duplication_status::type)0), fail_mode((duplication_fail_mode::type)0) {
  }

  virtual ~duplication_modify_request() throw();
  std::string app_name;
  int32_t dupid;
  duplication_status::type status;
  duplication_fail_mode::type fail_mode;

  _duplication_modify_request__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_dupid(const int32_t val);

  void __set_status(const duplication_status::type val);

  void __set_fail_mode(const duplication_fail_mode::type val);

  bool operator == (const duplication_modify_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (!(dupid == rhs.dupid))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.fail_mode != rhs.__isset.fail_mode)
      return false;
    else if (__isset.fail_mode && !(fail_mode == rhs.fail_mode))
      return false;
    return true;
  }
  bool operator != (const duplication_modify_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const duplication_modify_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(duplication_modify_request &a, duplication_modify_request &b);

inline std::ostream& operator<<(std::ostream& out, const duplication_modify_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _duplication_modify_response__isset {
  _duplication_modify_response__isset() : err(false), appid(false) {}
  bool err :1;
  bool appid :1;
} _duplication_modify_response__isset;

class duplication_modify_response {
 public:

  duplication_modify_response(const duplication_modify_response&);
  duplication_modify_response& operator=(const duplication_modify_response&);
  duplication_modify_response() : appid(0) {
  }

  virtual ~duplication_modify_response() throw();
   ::dsn::error_code err;
  int32_t appid;

  _duplication_modify_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_appid(const int32_t val);

  bool operator == (const duplication_modify_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(appid == rhs.appid))
      return false;
    return true;
  }
  bool operator != (const duplication_modify_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const duplication_modify_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(duplication_modify_response &a, duplication_modify_response &b);

inline std::ostream& operator<<(std::ostream& out, const duplication_modify_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _duplication_entry__isset {
  _duplication_entry__isset() : dupid(false), status(false), remote(false), create_ts(false), progress(false), fail_mode(false) {}
  bool dupid :1;
  bool status :1;
  bool remote :1;
  bool create_ts :1;
  bool progress :1;
  bool fail_mode :1;
} _duplication_entry__isset;

class duplication_entry {
 public:

  duplication_entry(const duplication_entry&);
  duplication_entry& operator=(const duplication_entry&);
  duplication_entry() : dupid(0), status((duplication_status::type)0), remote(), create_ts(0), fail_mode((duplication_fail_mode::type)0) {
  }

  virtual ~duplication_entry() throw();
  int32_t dupid;
  duplication_status::type status;
  std::string remote;
  int64_t create_ts;
  std::map<int32_t, int64_t>  progress;
  duplication_fail_mode::type fail_mode;

  _duplication_entry__isset __isset;

  void __set_dupid(const int32_t val);

  void __set_status(const duplication_status::type val);

  void __set_remote(const std::string& val);

  void __set_create_ts(const int64_t val);

  void __set_progress(const std::map<int32_t, int64_t> & val);

  void __set_fail_mode(const duplication_fail_mode::type val);

  bool operator == (const duplication_entry & rhs) const
  {
    if (!(dupid == rhs.dupid))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(remote == rhs.remote))
      return false;
    if (!(create_ts == rhs.create_ts))
      return false;
    if (__isset.progress != rhs.__isset.progress)
      return false;
    else if (__isset.progress && !(progress == rhs.progress))
      return false;
    if (__isset.fail_mode != rhs.__isset.fail_mode)
      return false;
    else if (__isset.fail_mode && !(fail_mode == rhs.fail_mode))
      return false;
    return true;
  }
  bool operator != (const duplication_entry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const duplication_entry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(duplication_entry &a, duplication_entry &b);

inline std::ostream& operator<<(std::ostream& out, const duplication_entry& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _duplication_query_request__isset {
  _duplication_query_request__isset() : app_name(false) {}
  bool app_name :1;
} _duplication_query_request__isset;

class duplication_query_request {
 public:

  duplication_query_request(const duplication_query_request&);
  duplication_query_request& operator=(const duplication_query_request&);
  duplication_query_request() : app_name() {
  }

  virtual ~duplication_query_request() throw();
  std::string app_name;

  _duplication_query_request__isset __isset;

  void __set_app_name(const std::string& val);

  bool operator == (const duplication_query_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    return true;
  }
  bool operator != (const duplication_query_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const duplication_query_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(duplication_query_request &a, duplication_query_request &b);

inline std::ostream& operator<<(std::ostream& out, const duplication_query_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _duplication_query_response__isset {
  _duplication_query_response__isset() : err(false), appid(false), entry_list(false) {}
  bool err :1;
  bool appid :1;
  bool entry_list :1;
} _duplication_query_response__isset;

class duplication_query_response {
 public:

  duplication_query_response(const duplication_query_response&);
  duplication_query_response& operator=(const duplication_query_response&);
  duplication_query_response() : appid(0) {
  }

  virtual ~duplication_query_response() throw();
   ::dsn::error_code err;
  int32_t appid;
  std::vector<duplication_entry>  entry_list;

  _duplication_query_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_appid(const int32_t val);

  void __set_entry_list(const std::vector<duplication_entry> & val);

  bool operator == (const duplication_query_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(appid == rhs.appid))
      return false;
    if (!(entry_list == rhs.entry_list))
      return false;
    return true;
  }
  bool operator != (const duplication_query_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const duplication_query_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(duplication_query_response &a, duplication_query_response &b);

inline std::ostream& operator<<(std::ostream& out, const duplication_query_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _duplication_confirm_entry__isset {
  _duplication_confirm_entry__isset() : dupid(false), confirmed_decree(false), checkpoint_prepared(true) {}
  bool dupid :1;
  bool confirmed_decree :1;
  bool checkpoint_prepared :1;
} _duplication_confirm_entry__isset;

class duplication_confirm_entry {
 public:

  duplication_confirm_entry(const duplication_confirm_entry&);
  duplication_confirm_entry& operator=(const duplication_confirm_entry&);
  duplication_confirm_entry() : dupid(0), confirmed_decree(0), checkpoint_prepared(false) {
  }

  virtual ~duplication_confirm_entry() throw();
  int32_t dupid;
  int64_t confirmed_decree;
  bool checkpoint_prepared;

  _duplication_confirm_entry__isset __isset;

  void __set_dupid(const int32_t val);

  void __set_confirmed_decree(const int64_t val);

  void __set_checkpoint_prepared(const bool val);

  bool operator == (const duplication_confirm_entry & rhs) const
  {
    if (!(dupid == rhs.dupid))
      return false;
    if (!(confirmed_decree == rhs.confirmed_decree))
      return false;
    if (__isset.checkpoint_prepared != rhs.__isset.checkpoint_prepared)
      return false;
    else if (__isset.checkpoint_prepared && !(checkpoint_prepared == rhs.checkpoint_prepared))
      return false;
    return true;
  }
  bool operator != (const duplication_confirm_entry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const duplication_confirm_entry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(duplication_confirm_entry &a, duplication_confirm_entry &b);

inline std::ostream& operator<<(std::ostream& out, const duplication_confirm_entry& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _duplication_sync_request__isset {
  _duplication_sync_request__isset() : node(false), confirm_list(false) {}
  bool node :1;
  bool confirm_list :1;
} _duplication_sync_request__isset;

class duplication_sync_request {
 public:

  duplication_sync_request(const duplication_sync_request&);
  duplication_sync_request& operator=(const duplication_sync_request&);
  duplication_sync_request() {
  }

  virtual ~duplication_sync_request() throw();
   ::dsn::rpc_address node;
  std::map< ::dsn::gpid, std::vector<duplication_confirm_entry> >  confirm_list;

  _duplication_sync_request__isset __isset;

  void __set_node(const  ::dsn::rpc_address& val);

  void __set_confirm_list(const std::map< ::dsn::gpid, std::vector<duplication_confirm_entry> > & val);

  bool operator == (const duplication_sync_request & rhs) const
  {
    if (!(node == rhs.node))
      return false;
    if (!(confirm_list == rhs.confirm_list))
      return false;
    return true;
  }
  bool operator != (const duplication_sync_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const duplication_sync_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(duplication_sync_request &a, duplication_sync_request &b);

inline std::ostream& operator<<(std::ostream& out, const duplication_sync_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _duplication_sync_response__isset {
  _duplication_sync_response__isset() : err(false), dup_map(false) {}
  bool err :1;
  bool dup_map :1;
} _duplication_sync_response__isset;

class duplication_sync_response {
 public:

  duplication_sync_response(const duplication_sync_response&);
  duplication_sync_response& operator=(const duplication_sync_response&);
  duplication_sync_response() {
  }

  virtual ~duplication_sync_response() throw();
   ::dsn::error_code err;
  std::map<int32_t, std::map<int32_t, duplication_entry> >  dup_map;

  _duplication_sync_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_dup_map(const std::map<int32_t, std::map<int32_t, duplication_entry> > & val);

  bool operator == (const duplication_sync_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(dup_map == rhs.dup_map))
      return false;
    return true;
  }
  bool operator != (const duplication_sync_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const duplication_sync_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(duplication_sync_response &a, duplication_sync_response &b);

inline std::ostream& operator<<(std::ostream& out, const duplication_sync_response& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
