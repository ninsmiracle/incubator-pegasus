/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "duplication_internal_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace dsn { namespace apps {


duplicate_request::~duplicate_request() throw() {
}


void duplicate_request::__set_entries(const std::vector<duplicate_entry> & val) {
  this->entries = val;
}

uint32_t duplicate_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->entries.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->entries.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->entries[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.entries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t duplicate_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("duplicate_request");

  xfer += oprot->writeFieldBegin("entries", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->entries.size()));
    std::vector<duplicate_entry> ::const_iterator _iter5;
    for (_iter5 = this->entries.begin(); _iter5 != this->entries.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(duplicate_request &a, duplicate_request &b) {
  using ::std::swap;
  swap(a.entries, b.entries);
  swap(a.__isset, b.__isset);
}

duplicate_request::duplicate_request(const duplicate_request& other6) {
  entries = other6.entries;
  __isset = other6.__isset;
}
duplicate_request& duplicate_request::operator=(const duplicate_request& other7) {
  entries = other7.entries;
  __isset = other7.__isset;
  return *this;
}
void duplicate_request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "duplicate_request(";
  out << "entries=" << to_string(entries);
  out << ")";
}


duplicate_entry::~duplicate_entry() throw() {
}


void duplicate_entry::__set_timestamp(const int64_t val) {
  this->timestamp = val;
__isset.timestamp = true;
}

void duplicate_entry::__set_task_code(const  ::dsn::task_code& val) {
  this->task_code = val;
__isset.task_code = true;
}

void duplicate_entry::__set_raw_message(const  ::dsn::blob& val) {
  this->raw_message = val;
__isset.raw_message = true;
}

void duplicate_entry::__set_cluster_id(const int8_t val) {
  this->cluster_id = val;
__isset.cluster_id = true;
}

void duplicate_entry::__set_verify_timetag(const bool val) {
  this->verify_timetag = val;
__isset.verify_timetag = true;
}

uint32_t duplicate_entry::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->task_code.read(iprot);
          this->__isset.task_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->raw_message.read(iprot);
          this->__isset.raw_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->cluster_id);
          this->__isset.cluster_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->verify_timetag);
          this->__isset.verify_timetag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t duplicate_entry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("duplicate_entry");

  if (this->__isset.timestamp) {
    xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->timestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.task_code) {
    xfer += oprot->writeFieldBegin("task_code", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->task_code.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.raw_message) {
    xfer += oprot->writeFieldBegin("raw_message", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->raw_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cluster_id) {
    xfer += oprot->writeFieldBegin("cluster_id", ::apache::thrift::protocol::T_BYTE, 4);
    xfer += oprot->writeByte(this->cluster_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.verify_timetag) {
    xfer += oprot->writeFieldBegin("verify_timetag", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->verify_timetag);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(duplicate_entry &a, duplicate_entry &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.task_code, b.task_code);
  swap(a.raw_message, b.raw_message);
  swap(a.cluster_id, b.cluster_id);
  swap(a.verify_timetag, b.verify_timetag);
  swap(a.__isset, b.__isset);
}

duplicate_entry::duplicate_entry(const duplicate_entry& other8) {
  timestamp = other8.timestamp;
  task_code = other8.task_code;
  raw_message = other8.raw_message;
  cluster_id = other8.cluster_id;
  verify_timetag = other8.verify_timetag;
  __isset = other8.__isset;
}
duplicate_entry& duplicate_entry::operator=(const duplicate_entry& other9) {
  timestamp = other9.timestamp;
  task_code = other9.task_code;
  raw_message = other9.raw_message;
  cluster_id = other9.cluster_id;
  verify_timetag = other9.verify_timetag;
  __isset = other9.__isset;
  return *this;
}
void duplicate_entry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "duplicate_entry(";
  out << "timestamp="; (__isset.timestamp ? (out << to_string(timestamp)) : (out << "<null>"));
  out << ", " << "task_code="; (__isset.task_code ? (out << to_string(task_code)) : (out << "<null>"));
  out << ", " << "raw_message="; (__isset.raw_message ? (out << to_string(raw_message)) : (out << "<null>"));
  out << ", " << "cluster_id="; (__isset.cluster_id ? (out << to_string(cluster_id)) : (out << "<null>"));
  out << ", " << "verify_timetag="; (__isset.verify_timetag ? (out << to_string(verify_timetag)) : (out << "<null>"));
  out << ")";
}


duplicate_response::~duplicate_response() throw() {
}


void duplicate_response::__set_error(const int32_t val) {
  this->error = val;
__isset.error = true;
}

void duplicate_response::__set_error_hint(const std::string& val) {
  this->error_hint = val;
__isset.error_hint = true;
}

uint32_t duplicate_response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_hint);
          this->__isset.error_hint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t duplicate_response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("duplicate_response");

  if (this->__isset.error) {
    xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->error);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.error_hint) {
    xfer += oprot->writeFieldBegin("error_hint", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->error_hint);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(duplicate_response &a, duplicate_response &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.error_hint, b.error_hint);
  swap(a.__isset, b.__isset);
}

duplicate_response::duplicate_response(const duplicate_response& other10) {
  error = other10.error;
  error_hint = other10.error_hint;
  __isset = other10.__isset;
}
duplicate_response& duplicate_response::operator=(const duplicate_response& other11) {
  error = other11.error;
  error_hint = other11.error_hint;
  __isset = other11.__isset;
  return *this;
}
void duplicate_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "duplicate_response(";
  out << "error="; (__isset.error ? (out << to_string(error)) : (out << "<null>"));
  out << ", " << "error_hint="; (__isset.error_hint ? (out << to_string(error_hint)) : (out << "<null>"));
  out << ")";
}

}} // namespace
