/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef backup_TYPES_H
#define backup_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "dsn_types.h"
#include "dsn.layer2_types.h"


namespace dsn { namespace replication {

class policy_info;

class configuration_restore_request;

class backup_request;

class backup_response;

class backup_clear_request;

class configuration_modify_backup_policy_request;

class configuration_modify_backup_policy_response;

class configuration_add_backup_policy_request;

class configuration_add_backup_policy_response;

class policy_entry;

class backup_entry;

class configuration_query_backup_policy_request;

class configuration_query_backup_policy_response;

class configuration_report_restore_status_request;

class configuration_report_restore_status_response;

class configuration_query_restore_request;

class configuration_query_restore_response;

class start_backup_app_request;

class start_backup_app_response;

class backup_item;

class query_backup_status_request;

class query_backup_status_response;

typedef struct _policy_info__isset {
  _policy_info__isset() : policy_name(false), backup_provider_type(false) {}
  bool policy_name :1;
  bool backup_provider_type :1;
} _policy_info__isset;

class policy_info {
 public:

  policy_info(const policy_info&);
  policy_info& operator=(const policy_info&);
  policy_info() : policy_name(), backup_provider_type() {
  }

  virtual ~policy_info() throw();
  std::string policy_name;
  std::string backup_provider_type;

  _policy_info__isset __isset;

  void __set_policy_name(const std::string& val);

  void __set_backup_provider_type(const std::string& val);

  bool operator == (const policy_info & rhs) const
  {
    if (!(policy_name == rhs.policy_name))
      return false;
    if (!(backup_provider_type == rhs.backup_provider_type))
      return false;
    return true;
  }
  bool operator != (const policy_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const policy_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(policy_info &a, policy_info &b);

inline std::ostream& operator<<(std::ostream& out, const policy_info& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_restore_request__isset {
  _configuration_restore_request__isset() : cluster_name(false), policy_name(false), time_stamp(false), app_name(false), app_id(false), new_app_name(false), backup_provider_name(false), skip_bad_partition(false), restore_path(false) {}
  bool cluster_name :1;
  bool policy_name :1;
  bool time_stamp :1;
  bool app_name :1;
  bool app_id :1;
  bool new_app_name :1;
  bool backup_provider_name :1;
  bool skip_bad_partition :1;
  bool restore_path :1;
} _configuration_restore_request__isset;

class configuration_restore_request {
 public:

  configuration_restore_request(const configuration_restore_request&);
  configuration_restore_request& operator=(const configuration_restore_request&);
  configuration_restore_request() : cluster_name(), policy_name(), time_stamp(0), app_name(), app_id(0), new_app_name(), backup_provider_name(), skip_bad_partition(0), restore_path() {
  }

  virtual ~configuration_restore_request() throw();
  std::string cluster_name;
  std::string policy_name;
  int64_t time_stamp;
  std::string app_name;
  int32_t app_id;
  std::string new_app_name;
  std::string backup_provider_name;
  bool skip_bad_partition;
  std::string restore_path;

  _configuration_restore_request__isset __isset;

  void __set_cluster_name(const std::string& val);

  void __set_policy_name(const std::string& val);

  void __set_time_stamp(const int64_t val);

  void __set_app_name(const std::string& val);

  void __set_app_id(const int32_t val);

  void __set_new_app_name(const std::string& val);

  void __set_backup_provider_name(const std::string& val);

  void __set_skip_bad_partition(const bool val);

  void __set_restore_path(const std::string& val);

  bool operator == (const configuration_restore_request & rhs) const
  {
    if (!(cluster_name == rhs.cluster_name))
      return false;
    if (!(policy_name == rhs.policy_name))
      return false;
    if (!(time_stamp == rhs.time_stamp))
      return false;
    if (!(app_name == rhs.app_name))
      return false;
    if (!(app_id == rhs.app_id))
      return false;
    if (!(new_app_name == rhs.new_app_name))
      return false;
    if (!(backup_provider_name == rhs.backup_provider_name))
      return false;
    if (!(skip_bad_partition == rhs.skip_bad_partition))
      return false;
    if (__isset.restore_path != rhs.__isset.restore_path)
      return false;
    else if (__isset.restore_path && !(restore_path == rhs.restore_path))
      return false;
    return true;
  }
  bool operator != (const configuration_restore_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_restore_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_restore_request &a, configuration_restore_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_restore_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _backup_request__isset {
  _backup_request__isset() : pid(false), policy(false), app_name(false), backup_id(false), backup_path(false) {}
  bool pid :1;
  bool policy :1;
  bool app_name :1;
  bool backup_id :1;
  bool backup_path :1;
} _backup_request__isset;

class backup_request {
 public:

  backup_request(const backup_request&);
  backup_request& operator=(const backup_request&);
  backup_request() : app_name(), backup_id(0), backup_path() {
  }

  virtual ~backup_request() throw();
   ::dsn::gpid pid;
  policy_info policy;
  std::string app_name;
  int64_t backup_id;
  std::string backup_path;

  _backup_request__isset __isset;

  void __set_pid(const  ::dsn::gpid& val);

  void __set_policy(const policy_info& val);

  void __set_app_name(const std::string& val);

  void __set_backup_id(const int64_t val);

  void __set_backup_path(const std::string& val);

  bool operator == (const backup_request & rhs) const
  {
    if (!(pid == rhs.pid))
      return false;
    if (!(policy == rhs.policy))
      return false;
    if (!(app_name == rhs.app_name))
      return false;
    if (!(backup_id == rhs.backup_id))
      return false;
    if (__isset.backup_path != rhs.__isset.backup_path)
      return false;
    else if (__isset.backup_path && !(backup_path == rhs.backup_path))
      return false;
    return true;
  }
  bool operator != (const backup_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const backup_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(backup_request &a, backup_request &b);

inline std::ostream& operator<<(std::ostream& out, const backup_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _backup_response__isset {
  _backup_response__isset() : err(false), pid(false), progress(false), policy_name(false), backup_id(false), checkpoint_total_size(false) {}
  bool err :1;
  bool pid :1;
  bool progress :1;
  bool policy_name :1;
  bool backup_id :1;
  bool checkpoint_total_size :1;
} _backup_response__isset;

class backup_response {
 public:

  backup_response(const backup_response&);
  backup_response& operator=(const backup_response&);
  backup_response() : progress(0), policy_name(), backup_id(0), checkpoint_total_size(0) {
  }

  virtual ~backup_response() throw();
   ::dsn::error_code err;
   ::dsn::gpid pid;
  int32_t progress;
  std::string policy_name;
  int64_t backup_id;
  int64_t checkpoint_total_size;

  _backup_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_pid(const  ::dsn::gpid& val);

  void __set_progress(const int32_t val);

  void __set_policy_name(const std::string& val);

  void __set_backup_id(const int64_t val);

  void __set_checkpoint_total_size(const int64_t val);

  bool operator == (const backup_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(pid == rhs.pid))
      return false;
    if (!(progress == rhs.progress))
      return false;
    if (!(policy_name == rhs.policy_name))
      return false;
    if (!(backup_id == rhs.backup_id))
      return false;
    if (!(checkpoint_total_size == rhs.checkpoint_total_size))
      return false;
    return true;
  }
  bool operator != (const backup_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const backup_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(backup_response &a, backup_response &b);

inline std::ostream& operator<<(std::ostream& out, const backup_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _backup_clear_request__isset {
  _backup_clear_request__isset() : pid(false), policy_name(false) {}
  bool pid :1;
  bool policy_name :1;
} _backup_clear_request__isset;

class backup_clear_request {
 public:

  backup_clear_request(const backup_clear_request&);
  backup_clear_request& operator=(const backup_clear_request&);
  backup_clear_request() : policy_name() {
  }

  virtual ~backup_clear_request() throw();
   ::dsn::gpid pid;
  std::string policy_name;

  _backup_clear_request__isset __isset;

  void __set_pid(const  ::dsn::gpid& val);

  void __set_policy_name(const std::string& val);

  bool operator == (const backup_clear_request & rhs) const
  {
    if (!(pid == rhs.pid))
      return false;
    if (!(policy_name == rhs.policy_name))
      return false;
    return true;
  }
  bool operator != (const backup_clear_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const backup_clear_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(backup_clear_request &a, backup_clear_request &b);

inline std::ostream& operator<<(std::ostream& out, const backup_clear_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_modify_backup_policy_request__isset {
  _configuration_modify_backup_policy_request__isset() : policy_name(false), add_appids(false), removal_appids(false), new_backup_interval_sec(false), backup_history_count_to_keep(false), is_disable(false), start_time(false) {}
  bool policy_name :1;
  bool add_appids :1;
  bool removal_appids :1;
  bool new_backup_interval_sec :1;
  bool backup_history_count_to_keep :1;
  bool is_disable :1;
  bool start_time :1;
} _configuration_modify_backup_policy_request__isset;

class configuration_modify_backup_policy_request {
 public:

  configuration_modify_backup_policy_request(const configuration_modify_backup_policy_request&);
  configuration_modify_backup_policy_request& operator=(const configuration_modify_backup_policy_request&);
  configuration_modify_backup_policy_request() : policy_name(), new_backup_interval_sec(0), backup_history_count_to_keep(0), is_disable(0), start_time() {
  }

  virtual ~configuration_modify_backup_policy_request() throw();
  std::string policy_name;
  std::vector<int32_t>  add_appids;
  std::vector<int32_t>  removal_appids;
  int64_t new_backup_interval_sec;
  int32_t backup_history_count_to_keep;
  bool is_disable;
  std::string start_time;

  _configuration_modify_backup_policy_request__isset __isset;

  void __set_policy_name(const std::string& val);

  void __set_add_appids(const std::vector<int32_t> & val);

  void __set_removal_appids(const std::vector<int32_t> & val);

  void __set_new_backup_interval_sec(const int64_t val);

  void __set_backup_history_count_to_keep(const int32_t val);

  void __set_is_disable(const bool val);

  void __set_start_time(const std::string& val);

  bool operator == (const configuration_modify_backup_policy_request & rhs) const
  {
    if (!(policy_name == rhs.policy_name))
      return false;
    if (__isset.add_appids != rhs.__isset.add_appids)
      return false;
    else if (__isset.add_appids && !(add_appids == rhs.add_appids))
      return false;
    if (__isset.removal_appids != rhs.__isset.removal_appids)
      return false;
    else if (__isset.removal_appids && !(removal_appids == rhs.removal_appids))
      return false;
    if (__isset.new_backup_interval_sec != rhs.__isset.new_backup_interval_sec)
      return false;
    else if (__isset.new_backup_interval_sec && !(new_backup_interval_sec == rhs.new_backup_interval_sec))
      return false;
    if (__isset.backup_history_count_to_keep != rhs.__isset.backup_history_count_to_keep)
      return false;
    else if (__isset.backup_history_count_to_keep && !(backup_history_count_to_keep == rhs.backup_history_count_to_keep))
      return false;
    if (__isset.is_disable != rhs.__isset.is_disable)
      return false;
    else if (__isset.is_disable && !(is_disable == rhs.is_disable))
      return false;
    if (__isset.start_time != rhs.__isset.start_time)
      return false;
    else if (__isset.start_time && !(start_time == rhs.start_time))
      return false;
    return true;
  }
  bool operator != (const configuration_modify_backup_policy_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_modify_backup_policy_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_modify_backup_policy_request &a, configuration_modify_backup_policy_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_modify_backup_policy_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_modify_backup_policy_response__isset {
  _configuration_modify_backup_policy_response__isset() : err(false), hint_message(false) {}
  bool err :1;
  bool hint_message :1;
} _configuration_modify_backup_policy_response__isset;

class configuration_modify_backup_policy_response {
 public:

  configuration_modify_backup_policy_response(const configuration_modify_backup_policy_response&);
  configuration_modify_backup_policy_response& operator=(const configuration_modify_backup_policy_response&);
  configuration_modify_backup_policy_response() : hint_message() {
  }

  virtual ~configuration_modify_backup_policy_response() throw();
   ::dsn::error_code err;
  std::string hint_message;

  _configuration_modify_backup_policy_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_hint_message(const std::string& val);

  bool operator == (const configuration_modify_backup_policy_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(hint_message == rhs.hint_message))
      return false;
    return true;
  }
  bool operator != (const configuration_modify_backup_policy_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_modify_backup_policy_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_modify_backup_policy_response &a, configuration_modify_backup_policy_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_modify_backup_policy_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_add_backup_policy_request__isset {
  _configuration_add_backup_policy_request__isset() : backup_provider_type(false), policy_name(false), app_ids(false), backup_interval_seconds(false), backup_history_count_to_keep(false), start_time(false) {}
  bool backup_provider_type :1;
  bool policy_name :1;
  bool app_ids :1;
  bool backup_interval_seconds :1;
  bool backup_history_count_to_keep :1;
  bool start_time :1;
} _configuration_add_backup_policy_request__isset;

class configuration_add_backup_policy_request {
 public:

  configuration_add_backup_policy_request(const configuration_add_backup_policy_request&);
  configuration_add_backup_policy_request& operator=(const configuration_add_backup_policy_request&);
  configuration_add_backup_policy_request() : backup_provider_type(), policy_name(), backup_interval_seconds(0), backup_history_count_to_keep(0), start_time() {
  }

  virtual ~configuration_add_backup_policy_request() throw();
  std::string backup_provider_type;
  std::string policy_name;
  std::vector<int32_t>  app_ids;
  int64_t backup_interval_seconds;
  int32_t backup_history_count_to_keep;
  std::string start_time;

  _configuration_add_backup_policy_request__isset __isset;

  void __set_backup_provider_type(const std::string& val);

  void __set_policy_name(const std::string& val);

  void __set_app_ids(const std::vector<int32_t> & val);

  void __set_backup_interval_seconds(const int64_t val);

  void __set_backup_history_count_to_keep(const int32_t val);

  void __set_start_time(const std::string& val);

  bool operator == (const configuration_add_backup_policy_request & rhs) const
  {
    if (!(backup_provider_type == rhs.backup_provider_type))
      return false;
    if (!(policy_name == rhs.policy_name))
      return false;
    if (!(app_ids == rhs.app_ids))
      return false;
    if (!(backup_interval_seconds == rhs.backup_interval_seconds))
      return false;
    if (!(backup_history_count_to_keep == rhs.backup_history_count_to_keep))
      return false;
    if (!(start_time == rhs.start_time))
      return false;
    return true;
  }
  bool operator != (const configuration_add_backup_policy_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_add_backup_policy_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_add_backup_policy_request &a, configuration_add_backup_policy_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_add_backup_policy_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_add_backup_policy_response__isset {
  _configuration_add_backup_policy_response__isset() : err(false), hint_message(false) {}
  bool err :1;
  bool hint_message :1;
} _configuration_add_backup_policy_response__isset;

class configuration_add_backup_policy_response {
 public:

  configuration_add_backup_policy_response(const configuration_add_backup_policy_response&);
  configuration_add_backup_policy_response& operator=(const configuration_add_backup_policy_response&);
  configuration_add_backup_policy_response() : hint_message() {
  }

  virtual ~configuration_add_backup_policy_response() throw();
   ::dsn::error_code err;
  std::string hint_message;

  _configuration_add_backup_policy_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_hint_message(const std::string& val);

  bool operator == (const configuration_add_backup_policy_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(hint_message == rhs.hint_message))
      return false;
    return true;
  }
  bool operator != (const configuration_add_backup_policy_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_add_backup_policy_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_add_backup_policy_response &a, configuration_add_backup_policy_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_add_backup_policy_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _policy_entry__isset {
  _policy_entry__isset() : policy_name(false), backup_provider_type(false), backup_interval_seconds(false), app_ids(false), backup_history_count_to_keep(false), start_time(false), is_disable(false) {}
  bool policy_name :1;
  bool backup_provider_type :1;
  bool backup_interval_seconds :1;
  bool app_ids :1;
  bool backup_history_count_to_keep :1;
  bool start_time :1;
  bool is_disable :1;
} _policy_entry__isset;

class policy_entry {
 public:

  policy_entry(const policy_entry&);
  policy_entry& operator=(const policy_entry&);
  policy_entry() : policy_name(), backup_provider_type(), backup_interval_seconds(), backup_history_count_to_keep(0), start_time(), is_disable(0) {
  }

  virtual ~policy_entry() throw();
  std::string policy_name;
  std::string backup_provider_type;
  std::string backup_interval_seconds;
  std::set<int32_t>  app_ids;
  int32_t backup_history_count_to_keep;
  std::string start_time;
  bool is_disable;

  _policy_entry__isset __isset;

  void __set_policy_name(const std::string& val);

  void __set_backup_provider_type(const std::string& val);

  void __set_backup_interval_seconds(const std::string& val);

  void __set_app_ids(const std::set<int32_t> & val);

  void __set_backup_history_count_to_keep(const int32_t val);

  void __set_start_time(const std::string& val);

  void __set_is_disable(const bool val);

  bool operator == (const policy_entry & rhs) const
  {
    if (!(policy_name == rhs.policy_name))
      return false;
    if (!(backup_provider_type == rhs.backup_provider_type))
      return false;
    if (!(backup_interval_seconds == rhs.backup_interval_seconds))
      return false;
    if (!(app_ids == rhs.app_ids))
      return false;
    if (!(backup_history_count_to_keep == rhs.backup_history_count_to_keep))
      return false;
    if (!(start_time == rhs.start_time))
      return false;
    if (!(is_disable == rhs.is_disable))
      return false;
    return true;
  }
  bool operator != (const policy_entry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const policy_entry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(policy_entry &a, policy_entry &b);

inline std::ostream& operator<<(std::ostream& out, const policy_entry& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _backup_entry__isset {
  _backup_entry__isset() : backup_id(false), start_time_ms(false), end_time_ms(false), app_ids(false) {}
  bool backup_id :1;
  bool start_time_ms :1;
  bool end_time_ms :1;
  bool app_ids :1;
} _backup_entry__isset;

class backup_entry {
 public:

  backup_entry(const backup_entry&);
  backup_entry& operator=(const backup_entry&);
  backup_entry() : backup_id(0), start_time_ms(0), end_time_ms(0) {
  }

  virtual ~backup_entry() throw();
  int64_t backup_id;
  int64_t start_time_ms;
  int64_t end_time_ms;
  std::set<int32_t>  app_ids;

  _backup_entry__isset __isset;

  void __set_backup_id(const int64_t val);

  void __set_start_time_ms(const int64_t val);

  void __set_end_time_ms(const int64_t val);

  void __set_app_ids(const std::set<int32_t> & val);

  bool operator == (const backup_entry & rhs) const
  {
    if (!(backup_id == rhs.backup_id))
      return false;
    if (!(start_time_ms == rhs.start_time_ms))
      return false;
    if (!(end_time_ms == rhs.end_time_ms))
      return false;
    if (!(app_ids == rhs.app_ids))
      return false;
    return true;
  }
  bool operator != (const backup_entry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const backup_entry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(backup_entry &a, backup_entry &b);

inline std::ostream& operator<<(std::ostream& out, const backup_entry& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_query_backup_policy_request__isset {
  _configuration_query_backup_policy_request__isset() : policy_names(false), backup_info_count(false) {}
  bool policy_names :1;
  bool backup_info_count :1;
} _configuration_query_backup_policy_request__isset;

class configuration_query_backup_policy_request {
 public:

  configuration_query_backup_policy_request(const configuration_query_backup_policy_request&);
  configuration_query_backup_policy_request& operator=(const configuration_query_backup_policy_request&);
  configuration_query_backup_policy_request() : backup_info_count(0) {
  }

  virtual ~configuration_query_backup_policy_request() throw();
  std::vector<std::string>  policy_names;
  int32_t backup_info_count;

  _configuration_query_backup_policy_request__isset __isset;

  void __set_policy_names(const std::vector<std::string> & val);

  void __set_backup_info_count(const int32_t val);

  bool operator == (const configuration_query_backup_policy_request & rhs) const
  {
    if (!(policy_names == rhs.policy_names))
      return false;
    if (!(backup_info_count == rhs.backup_info_count))
      return false;
    return true;
  }
  bool operator != (const configuration_query_backup_policy_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_query_backup_policy_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_query_backup_policy_request &a, configuration_query_backup_policy_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_query_backup_policy_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_query_backup_policy_response__isset {
  _configuration_query_backup_policy_response__isset() : err(false), policys(false), backup_infos(false), hint_msg(false) {}
  bool err :1;
  bool policys :1;
  bool backup_infos :1;
  bool hint_msg :1;
} _configuration_query_backup_policy_response__isset;

class configuration_query_backup_policy_response {
 public:

  configuration_query_backup_policy_response(const configuration_query_backup_policy_response&);
  configuration_query_backup_policy_response& operator=(const configuration_query_backup_policy_response&);
  configuration_query_backup_policy_response() : hint_msg() {
  }

  virtual ~configuration_query_backup_policy_response() throw();
   ::dsn::error_code err;
  std::vector<policy_entry>  policys;
  std::vector<std::vector<backup_entry> >  backup_infos;
  std::string hint_msg;

  _configuration_query_backup_policy_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_policys(const std::vector<policy_entry> & val);

  void __set_backup_infos(const std::vector<std::vector<backup_entry> > & val);

  void __set_hint_msg(const std::string& val);

  bool operator == (const configuration_query_backup_policy_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(policys == rhs.policys))
      return false;
    if (!(backup_infos == rhs.backup_infos))
      return false;
    if (__isset.hint_msg != rhs.__isset.hint_msg)
      return false;
    else if (__isset.hint_msg && !(hint_msg == rhs.hint_msg))
      return false;
    return true;
  }
  bool operator != (const configuration_query_backup_policy_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_query_backup_policy_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_query_backup_policy_response &a, configuration_query_backup_policy_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_query_backup_policy_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_report_restore_status_request__isset {
  _configuration_report_restore_status_request__isset() : pid(false), restore_status(false), progress(false), reason(false) {}
  bool pid :1;
  bool restore_status :1;
  bool progress :1;
  bool reason :1;
} _configuration_report_restore_status_request__isset;

class configuration_report_restore_status_request {
 public:

  configuration_report_restore_status_request(const configuration_report_restore_status_request&);
  configuration_report_restore_status_request& operator=(const configuration_report_restore_status_request&);
  configuration_report_restore_status_request() : progress(0), reason() {
  }

  virtual ~configuration_report_restore_status_request() throw();
   ::dsn::gpid pid;
   ::dsn::error_code restore_status;
  int32_t progress;
  std::string reason;

  _configuration_report_restore_status_request__isset __isset;

  void __set_pid(const  ::dsn::gpid& val);

  void __set_restore_status(const  ::dsn::error_code& val);

  void __set_progress(const int32_t val);

  void __set_reason(const std::string& val);

  bool operator == (const configuration_report_restore_status_request & rhs) const
  {
    if (!(pid == rhs.pid))
      return false;
    if (!(restore_status == rhs.restore_status))
      return false;
    if (!(progress == rhs.progress))
      return false;
    if (__isset.reason != rhs.__isset.reason)
      return false;
    else if (__isset.reason && !(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const configuration_report_restore_status_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_report_restore_status_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_report_restore_status_request &a, configuration_report_restore_status_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_report_restore_status_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_report_restore_status_response__isset {
  _configuration_report_restore_status_response__isset() : err(false) {}
  bool err :1;
} _configuration_report_restore_status_response__isset;

class configuration_report_restore_status_response {
 public:

  configuration_report_restore_status_response(const configuration_report_restore_status_response&);
  configuration_report_restore_status_response& operator=(const configuration_report_restore_status_response&);
  configuration_report_restore_status_response() {
  }

  virtual ~configuration_report_restore_status_response() throw();
   ::dsn::error_code err;

  _configuration_report_restore_status_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  bool operator == (const configuration_report_restore_status_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const configuration_report_restore_status_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_report_restore_status_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_report_restore_status_response &a, configuration_report_restore_status_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_report_restore_status_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_query_restore_request__isset {
  _configuration_query_restore_request__isset() : restore_app_id(false) {}
  bool restore_app_id :1;
} _configuration_query_restore_request__isset;

class configuration_query_restore_request {
 public:

  configuration_query_restore_request(const configuration_query_restore_request&);
  configuration_query_restore_request& operator=(const configuration_query_restore_request&);
  configuration_query_restore_request() : restore_app_id(0) {
  }

  virtual ~configuration_query_restore_request() throw();
  int32_t restore_app_id;

  _configuration_query_restore_request__isset __isset;

  void __set_restore_app_id(const int32_t val);

  bool operator == (const configuration_query_restore_request & rhs) const
  {
    if (!(restore_app_id == rhs.restore_app_id))
      return false;
    return true;
  }
  bool operator != (const configuration_query_restore_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_query_restore_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_query_restore_request &a, configuration_query_restore_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_query_restore_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_query_restore_response__isset {
  _configuration_query_restore_response__isset() : err(false), restore_status(false), restore_progress(false) {}
  bool err :1;
  bool restore_status :1;
  bool restore_progress :1;
} _configuration_query_restore_response__isset;

class configuration_query_restore_response {
 public:

  configuration_query_restore_response(const configuration_query_restore_response&);
  configuration_query_restore_response& operator=(const configuration_query_restore_response&);
  configuration_query_restore_response() {
  }

  virtual ~configuration_query_restore_response() throw();
   ::dsn::error_code err;
  std::vector< ::dsn::error_code>  restore_status;
  std::vector<int32_t>  restore_progress;

  _configuration_query_restore_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_restore_status(const std::vector< ::dsn::error_code> & val);

  void __set_restore_progress(const std::vector<int32_t> & val);

  bool operator == (const configuration_query_restore_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(restore_status == rhs.restore_status))
      return false;
    if (!(restore_progress == rhs.restore_progress))
      return false;
    return true;
  }
  bool operator != (const configuration_query_restore_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_query_restore_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_query_restore_response &a, configuration_query_restore_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_query_restore_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _start_backup_app_request__isset {
  _start_backup_app_request__isset() : backup_provider_type(false), app_id(false), backup_path(false) {}
  bool backup_provider_type :1;
  bool app_id :1;
  bool backup_path :1;
} _start_backup_app_request__isset;

class start_backup_app_request {
 public:

  start_backup_app_request(const start_backup_app_request&);
  start_backup_app_request& operator=(const start_backup_app_request&);
  start_backup_app_request() : backup_provider_type(), app_id(0), backup_path() {
  }

  virtual ~start_backup_app_request() throw();
  std::string backup_provider_type;
  int32_t app_id;
  std::string backup_path;

  _start_backup_app_request__isset __isset;

  void __set_backup_provider_type(const std::string& val);

  void __set_app_id(const int32_t val);

  void __set_backup_path(const std::string& val);

  bool operator == (const start_backup_app_request & rhs) const
  {
    if (!(backup_provider_type == rhs.backup_provider_type))
      return false;
    if (!(app_id == rhs.app_id))
      return false;
    if (__isset.backup_path != rhs.__isset.backup_path)
      return false;
    else if (__isset.backup_path && !(backup_path == rhs.backup_path))
      return false;
    return true;
  }
  bool operator != (const start_backup_app_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const start_backup_app_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(start_backup_app_request &a, start_backup_app_request &b);

inline std::ostream& operator<<(std::ostream& out, const start_backup_app_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _start_backup_app_response__isset {
  _start_backup_app_response__isset() : err(false), hint_message(false), backup_id(false) {}
  bool err :1;
  bool hint_message :1;
  bool backup_id :1;
} _start_backup_app_response__isset;

class start_backup_app_response {
 public:

  start_backup_app_response(const start_backup_app_response&);
  start_backup_app_response& operator=(const start_backup_app_response&);
  start_backup_app_response() : hint_message(), backup_id(0) {
  }

  virtual ~start_backup_app_response() throw();
   ::dsn::error_code err;
  std::string hint_message;
  int64_t backup_id;

  _start_backup_app_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_hint_message(const std::string& val);

  void __set_backup_id(const int64_t val);

  bool operator == (const start_backup_app_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(hint_message == rhs.hint_message))
      return false;
    if (__isset.backup_id != rhs.__isset.backup_id)
      return false;
    else if (__isset.backup_id && !(backup_id == rhs.backup_id))
      return false;
    return true;
  }
  bool operator != (const start_backup_app_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const start_backup_app_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(start_backup_app_response &a, start_backup_app_response &b);

inline std::ostream& operator<<(std::ostream& out, const start_backup_app_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _backup_item__isset {
  _backup_item__isset() : backup_id(false), app_name(false), backup_provider_type(false), backup_path(false), start_time_ms(false), end_time_ms(false), is_backup_failed(false) {}
  bool backup_id :1;
  bool app_name :1;
  bool backup_provider_type :1;
  bool backup_path :1;
  bool start_time_ms :1;
  bool end_time_ms :1;
  bool is_backup_failed :1;
} _backup_item__isset;

class backup_item {
 public:

  backup_item(const backup_item&);
  backup_item& operator=(const backup_item&);
  backup_item() : backup_id(0), app_name(), backup_provider_type(), backup_path(), start_time_ms(0), end_time_ms(0), is_backup_failed(0) {
  }

  virtual ~backup_item() throw();
  int64_t backup_id;
  std::string app_name;
  std::string backup_provider_type;
  std::string backup_path;
  int64_t start_time_ms;
  int64_t end_time_ms;
  bool is_backup_failed;

  _backup_item__isset __isset;

  void __set_backup_id(const int64_t val);

  void __set_app_name(const std::string& val);

  void __set_backup_provider_type(const std::string& val);

  void __set_backup_path(const std::string& val);

  void __set_start_time_ms(const int64_t val);

  void __set_end_time_ms(const int64_t val);

  void __set_is_backup_failed(const bool val);

  bool operator == (const backup_item & rhs) const
  {
    if (!(backup_id == rhs.backup_id))
      return false;
    if (!(app_name == rhs.app_name))
      return false;
    if (!(backup_provider_type == rhs.backup_provider_type))
      return false;
    if (!(backup_path == rhs.backup_path))
      return false;
    if (!(start_time_ms == rhs.start_time_ms))
      return false;
    if (!(end_time_ms == rhs.end_time_ms))
      return false;
    if (!(is_backup_failed == rhs.is_backup_failed))
      return false;
    return true;
  }
  bool operator != (const backup_item &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const backup_item & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(backup_item &a, backup_item &b);

inline std::ostream& operator<<(std::ostream& out, const backup_item& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _query_backup_status_request__isset {
  _query_backup_status_request__isset() : app_id(false), backup_id(false) {}
  bool app_id :1;
  bool backup_id :1;
} _query_backup_status_request__isset;

class query_backup_status_request {
 public:

  query_backup_status_request(const query_backup_status_request&);
  query_backup_status_request& operator=(const query_backup_status_request&);
  query_backup_status_request() : app_id(0), backup_id(0) {
  }

  virtual ~query_backup_status_request() throw();
  int32_t app_id;
  int64_t backup_id;

  _query_backup_status_request__isset __isset;

  void __set_app_id(const int32_t val);

  void __set_backup_id(const int64_t val);

  bool operator == (const query_backup_status_request & rhs) const
  {
    if (!(app_id == rhs.app_id))
      return false;
    if (__isset.backup_id != rhs.__isset.backup_id)
      return false;
    else if (__isset.backup_id && !(backup_id == rhs.backup_id))
      return false;
    return true;
  }
  bool operator != (const query_backup_status_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const query_backup_status_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(query_backup_status_request &a, query_backup_status_request &b);

inline std::ostream& operator<<(std::ostream& out, const query_backup_status_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _query_backup_status_response__isset {
  _query_backup_status_response__isset() : err(false), hint_message(false), backup_items(false) {}
  bool err :1;
  bool hint_message :1;
  bool backup_items :1;
} _query_backup_status_response__isset;

class query_backup_status_response {
 public:

  query_backup_status_response(const query_backup_status_response&);
  query_backup_status_response& operator=(const query_backup_status_response&);
  query_backup_status_response() : hint_message() {
  }

  virtual ~query_backup_status_response() throw();
   ::dsn::error_code err;
  std::string hint_message;
  std::vector<backup_item>  backup_items;

  _query_backup_status_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_hint_message(const std::string& val);

  void __set_backup_items(const std::vector<backup_item> & val);

  bool operator == (const query_backup_status_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(hint_message == rhs.hint_message))
      return false;
    if (__isset.backup_items != rhs.__isset.backup_items)
      return false;
    else if (__isset.backup_items && !(backup_items == rhs.backup_items))
      return false;
    return true;
  }
  bool operator != (const query_backup_status_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const query_backup_status_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(query_backup_status_response &a, query_backup_status_response &b);

inline std::ostream& operator<<(std::ostream& out, const query_backup_status_response& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
