/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "dsn_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace dsn {


rpc_address::~rpc_address() throw() {
}


uint32_t rpc_address::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rpc_address::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("rpc_address");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(rpc_address &a, rpc_address &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

rpc_address::rpc_address(const rpc_address& other0) {
  (void) other0;
}
rpc_address& rpc_address::operator=(const rpc_address& other1) {
  (void) other1;
  return *this;
}
void rpc_address::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "rpc_address(";
  out << ")";
}


blob::~blob() throw() {
}


uint32_t blob::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t blob::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("blob");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(blob &a, blob &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

blob::blob(const blob& other2) {
  (void) other2;
}
blob& blob::operator=(const blob& other3) {
  (void) other3;
  return *this;
}
void blob::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "blob(";
  out << ")";
}


error_code::~error_code() throw() {
}


uint32_t error_code::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t error_code::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("error_code");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(error_code &a, error_code &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

error_code::error_code(const error_code& other4) {
  (void) other4;
}
error_code& error_code::operator=(const error_code& other5) {
  (void) other5;
  return *this;
}
void error_code::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "error_code(";
  out << ")";
}


task_code::~task_code() throw() {
}


uint32_t task_code::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t task_code::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("task_code");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(task_code &a, task_code &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

task_code::task_code(const task_code& other6) {
  (void) other6;
}
task_code& task_code::operator=(const task_code& other7) {
  (void) other7;
  return *this;
}
void task_code::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "task_code(";
  out << ")";
}


gpid::~gpid() throw() {
}


uint32_t gpid::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t gpid::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("gpid");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(gpid &a, gpid &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

gpid::gpid(const gpid& other8) {
  (void) other8;
}
gpid& gpid::operator=(const gpid& other9) {
  (void) other9;
  return *this;
}
void gpid::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "gpid(";
  out << ")";
}

} // namespace
