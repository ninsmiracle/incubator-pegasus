/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef bulk_load_TYPES_H
#define bulk_load_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "dsn_types.h"
#include "dsn.layer2_types.h"
#include "metadata_types.h"


namespace dsn { namespace replication {

struct bulk_load_status {
  enum type {
    BLS_INVALID = 0,
    BLS_DOWNLOADING = 1,
    BLS_DOWNLOADED = 2,
    BLS_INGESTING = 3,
    BLS_SUCCEED = 4,
    BLS_FAILED = 5,
    BLS_PAUSING = 6,
    BLS_PAUSED = 7,
    BLS_CANCELED = 8
  };
};

extern const std::map<int, const char*> _bulk_load_status_VALUES_TO_NAMES;

struct ingestion_status {
  enum type {
    IS_INVALID = 0,
    IS_RUNNING = 1,
    IS_SUCCEED = 2,
    IS_FAILED = 3
  };
};

extern const std::map<int, const char*> _ingestion_status_VALUES_TO_NAMES;

struct bulk_load_control_type {
  enum type {
    BLC_PAUSE = 0,
    BLC_RESTART = 1,
    BLC_CANCEL = 2,
    BLC_FORCE_CANCEL = 3
  };
};

extern const std::map<int, const char*> _bulk_load_control_type_VALUES_TO_NAMES;

class bulk_load_metadata;

class start_bulk_load_request;

class start_bulk_load_response;

class partition_bulk_load_state;

class bulk_load_request;

class bulk_load_response;

class group_bulk_load_request;

class group_bulk_load_response;

class ingestion_request;

class ingestion_response;

class control_bulk_load_request;

class control_bulk_load_response;

class query_bulk_load_request;

class query_bulk_load_response;

class clear_bulk_load_state_request;

class clear_bulk_load_state_response;

typedef struct _bulk_load_metadata__isset {
  _bulk_load_metadata__isset() : files(false), file_total_size(false) {}
  bool files :1;
  bool file_total_size :1;
} _bulk_load_metadata__isset;

class bulk_load_metadata {
 public:

  bulk_load_metadata(const bulk_load_metadata&);
  bulk_load_metadata& operator=(const bulk_load_metadata&);
  bulk_load_metadata() : file_total_size(0) {
  }

  virtual ~bulk_load_metadata() throw();
  std::vector< ::dsn::replication::file_meta>  files;
  int64_t file_total_size;

  _bulk_load_metadata__isset __isset;

  void __set_files(const std::vector< ::dsn::replication::file_meta> & val);

  void __set_file_total_size(const int64_t val);

  bool operator == (const bulk_load_metadata & rhs) const
  {
    if (!(files == rhs.files))
      return false;
    if (!(file_total_size == rhs.file_total_size))
      return false;
    return true;
  }
  bool operator != (const bulk_load_metadata &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bulk_load_metadata & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(bulk_load_metadata &a, bulk_load_metadata &b);

inline std::ostream& operator<<(std::ostream& out, const bulk_load_metadata& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _start_bulk_load_request__isset {
  _start_bulk_load_request__isset() : app_name(false), cluster_name(false), file_provider_type(false), remote_root_path(false), ingest_behind(true) {}
  bool app_name :1;
  bool cluster_name :1;
  bool file_provider_type :1;
  bool remote_root_path :1;
  bool ingest_behind :1;
} _start_bulk_load_request__isset;

class start_bulk_load_request {
 public:

  start_bulk_load_request(const start_bulk_load_request&);
  start_bulk_load_request& operator=(const start_bulk_load_request&);
  start_bulk_load_request() : app_name(), cluster_name(), file_provider_type(), remote_root_path(), ingest_behind(false) {
  }

  virtual ~start_bulk_load_request() throw();
  std::string app_name;
  std::string cluster_name;
  std::string file_provider_type;
  std::string remote_root_path;
  bool ingest_behind;

  _start_bulk_load_request__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_cluster_name(const std::string& val);

  void __set_file_provider_type(const std::string& val);

  void __set_remote_root_path(const std::string& val);

  void __set_ingest_behind(const bool val);

  bool operator == (const start_bulk_load_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (!(cluster_name == rhs.cluster_name))
      return false;
    if (!(file_provider_type == rhs.file_provider_type))
      return false;
    if (!(remote_root_path == rhs.remote_root_path))
      return false;
    if (!(ingest_behind == rhs.ingest_behind))
      return false;
    return true;
  }
  bool operator != (const start_bulk_load_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const start_bulk_load_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(start_bulk_load_request &a, start_bulk_load_request &b);

inline std::ostream& operator<<(std::ostream& out, const start_bulk_load_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _start_bulk_load_response__isset {
  _start_bulk_load_response__isset() : err(false), hint_msg(false) {}
  bool err :1;
  bool hint_msg :1;
} _start_bulk_load_response__isset;

class start_bulk_load_response {
 public:

  start_bulk_load_response(const start_bulk_load_response&);
  start_bulk_load_response& operator=(const start_bulk_load_response&);
  start_bulk_load_response() : hint_msg() {
  }

  virtual ~start_bulk_load_response() throw();
   ::dsn::error_code err;
  std::string hint_msg;

  _start_bulk_load_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_hint_msg(const std::string& val);

  bool operator == (const start_bulk_load_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(hint_msg == rhs.hint_msg))
      return false;
    return true;
  }
  bool operator != (const start_bulk_load_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const start_bulk_load_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(start_bulk_load_response &a, start_bulk_load_response &b);

inline std::ostream& operator<<(std::ostream& out, const start_bulk_load_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _partition_bulk_load_state__isset {
  _partition_bulk_load_state__isset() : download_progress(true), download_status(false), ingest_status(true), is_cleaned_up(true), is_paused(true), downloaded_file_size(true) {}
  bool download_progress :1;
  bool download_status :1;
  bool ingest_status :1;
  bool is_cleaned_up :1;
  bool is_paused :1;
  bool downloaded_file_size :1;
} _partition_bulk_load_state__isset;

class partition_bulk_load_state {
 public:

  partition_bulk_load_state(const partition_bulk_load_state&);
  partition_bulk_load_state& operator=(const partition_bulk_load_state&);
  partition_bulk_load_state() : download_progress(0), ingest_status((ingestion_status::type)0), is_cleaned_up(false), is_paused(false), downloaded_file_size(0) {
    ingest_status = (ingestion_status::type)0;

  }

  virtual ~partition_bulk_load_state() throw();
  int32_t download_progress;
   ::dsn::error_code download_status;
  ingestion_status::type ingest_status;
  bool is_cleaned_up;
  bool is_paused;
  int32_t downloaded_file_size;

  _partition_bulk_load_state__isset __isset;

  void __set_download_progress(const int32_t val);

  void __set_download_status(const  ::dsn::error_code& val);

  void __set_ingest_status(const ingestion_status::type val);

  void __set_is_cleaned_up(const bool val);

  void __set_is_paused(const bool val);

  void __set_downloaded_file_size(const int32_t val);

  bool operator == (const partition_bulk_load_state & rhs) const
  {
    if (__isset.download_progress != rhs.__isset.download_progress)
      return false;
    else if (__isset.download_progress && !(download_progress == rhs.download_progress))
      return false;
    if (__isset.download_status != rhs.__isset.download_status)
      return false;
    else if (__isset.download_status && !(download_status == rhs.download_status))
      return false;
    if (__isset.ingest_status != rhs.__isset.ingest_status)
      return false;
    else if (__isset.ingest_status && !(ingest_status == rhs.ingest_status))
      return false;
    if (__isset.is_cleaned_up != rhs.__isset.is_cleaned_up)
      return false;
    else if (__isset.is_cleaned_up && !(is_cleaned_up == rhs.is_cleaned_up))
      return false;
    if (__isset.is_paused != rhs.__isset.is_paused)
      return false;
    else if (__isset.is_paused && !(is_paused == rhs.is_paused))
      return false;
    if (__isset.downloaded_file_size != rhs.__isset.downloaded_file_size)
      return false;
    else if (__isset.downloaded_file_size && !(downloaded_file_size == rhs.downloaded_file_size))
      return false;
    return true;
  }
  bool operator != (const partition_bulk_load_state &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const partition_bulk_load_state & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(partition_bulk_load_state &a, partition_bulk_load_state &b);

inline std::ostream& operator<<(std::ostream& out, const partition_bulk_load_state& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _bulk_load_request__isset {
  _bulk_load_request__isset() : pid(false), app_name(false), primary_addr(false), remote_provider_name(false), cluster_name(false), ballot(false), meta_bulk_load_status(false), query_bulk_load_metadata(false), remote_root_path(false) {}
  bool pid :1;
  bool app_name :1;
  bool primary_addr :1;
  bool remote_provider_name :1;
  bool cluster_name :1;
  bool ballot :1;
  bool meta_bulk_load_status :1;
  bool query_bulk_load_metadata :1;
  bool remote_root_path :1;
} _bulk_load_request__isset;

class bulk_load_request {
 public:

  bulk_load_request(const bulk_load_request&);
  bulk_load_request& operator=(const bulk_load_request&);
  bulk_load_request() : app_name(), remote_provider_name(), cluster_name(), ballot(0), meta_bulk_load_status((bulk_load_status::type)0), query_bulk_load_metadata(0), remote_root_path() {
  }

  virtual ~bulk_load_request() throw();
   ::dsn::gpid pid;
  std::string app_name;
   ::dsn::rpc_address primary_addr;
  std::string remote_provider_name;
  std::string cluster_name;
  int64_t ballot;
  bulk_load_status::type meta_bulk_load_status;
  bool query_bulk_load_metadata;
  std::string remote_root_path;

  _bulk_load_request__isset __isset;

  void __set_pid(const  ::dsn::gpid& val);

  void __set_app_name(const std::string& val);

  void __set_primary_addr(const  ::dsn::rpc_address& val);

  void __set_remote_provider_name(const std::string& val);

  void __set_cluster_name(const std::string& val);

  void __set_ballot(const int64_t val);

  void __set_meta_bulk_load_status(const bulk_load_status::type val);

  void __set_query_bulk_load_metadata(const bool val);

  void __set_remote_root_path(const std::string& val);

  bool operator == (const bulk_load_request & rhs) const
  {
    if (!(pid == rhs.pid))
      return false;
    if (!(app_name == rhs.app_name))
      return false;
    if (!(primary_addr == rhs.primary_addr))
      return false;
    if (!(remote_provider_name == rhs.remote_provider_name))
      return false;
    if (!(cluster_name == rhs.cluster_name))
      return false;
    if (!(ballot == rhs.ballot))
      return false;
    if (!(meta_bulk_load_status == rhs.meta_bulk_load_status))
      return false;
    if (!(query_bulk_load_metadata == rhs.query_bulk_load_metadata))
      return false;
    if (!(remote_root_path == rhs.remote_root_path))
      return false;
    return true;
  }
  bool operator != (const bulk_load_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bulk_load_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(bulk_load_request &a, bulk_load_request &b);

inline std::ostream& operator<<(std::ostream& out, const bulk_load_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _bulk_load_response__isset {
  _bulk_load_response__isset() : err(false), pid(false), app_name(false), primary_bulk_load_status(false), group_bulk_load_state(false), metadata(false), total_download_progress(false), is_group_ingestion_finished(false), is_group_bulk_load_context_cleaned_up(false), is_group_bulk_load_paused(false), total_downloaded_file_size(false) {}
  bool err :1;
  bool pid :1;
  bool app_name :1;
  bool primary_bulk_load_status :1;
  bool group_bulk_load_state :1;
  bool metadata :1;
  bool total_download_progress :1;
  bool is_group_ingestion_finished :1;
  bool is_group_bulk_load_context_cleaned_up :1;
  bool is_group_bulk_load_paused :1;
  bool total_downloaded_file_size :1;
} _bulk_load_response__isset;

class bulk_load_response {
 public:

  bulk_load_response(const bulk_load_response&);
  bulk_load_response& operator=(const bulk_load_response&);
  bulk_load_response() : app_name(), primary_bulk_load_status((bulk_load_status::type)0), total_download_progress(0), is_group_ingestion_finished(0), is_group_bulk_load_context_cleaned_up(0), is_group_bulk_load_paused(0), total_downloaded_file_size(0) {
  }

  virtual ~bulk_load_response() throw();
   ::dsn::error_code err;
   ::dsn::gpid pid;
  std::string app_name;
  bulk_load_status::type primary_bulk_load_status;
  std::map< ::dsn::rpc_address, partition_bulk_load_state>  group_bulk_load_state;
  bulk_load_metadata metadata;
  int32_t total_download_progress;
  bool is_group_ingestion_finished;
  bool is_group_bulk_load_context_cleaned_up;
  bool is_group_bulk_load_paused;
  int32_t total_downloaded_file_size;

  _bulk_load_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_pid(const  ::dsn::gpid& val);

  void __set_app_name(const std::string& val);

  void __set_primary_bulk_load_status(const bulk_load_status::type val);

  void __set_group_bulk_load_state(const std::map< ::dsn::rpc_address, partition_bulk_load_state> & val);

  void __set_metadata(const bulk_load_metadata& val);

  void __set_total_download_progress(const int32_t val);

  void __set_is_group_ingestion_finished(const bool val);

  void __set_is_group_bulk_load_context_cleaned_up(const bool val);

  void __set_is_group_bulk_load_paused(const bool val);

  void __set_total_downloaded_file_size(const int32_t val);

  bool operator == (const bulk_load_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(pid == rhs.pid))
      return false;
    if (!(app_name == rhs.app_name))
      return false;
    if (!(primary_bulk_load_status == rhs.primary_bulk_load_status))
      return false;
    if (!(group_bulk_load_state == rhs.group_bulk_load_state))
      return false;
    if (__isset.metadata != rhs.__isset.metadata)
      return false;
    else if (__isset.metadata && !(metadata == rhs.metadata))
      return false;
    if (__isset.total_download_progress != rhs.__isset.total_download_progress)
      return false;
    else if (__isset.total_download_progress && !(total_download_progress == rhs.total_download_progress))
      return false;
    if (__isset.is_group_ingestion_finished != rhs.__isset.is_group_ingestion_finished)
      return false;
    else if (__isset.is_group_ingestion_finished && !(is_group_ingestion_finished == rhs.is_group_ingestion_finished))
      return false;
    if (__isset.is_group_bulk_load_context_cleaned_up != rhs.__isset.is_group_bulk_load_context_cleaned_up)
      return false;
    else if (__isset.is_group_bulk_load_context_cleaned_up && !(is_group_bulk_load_context_cleaned_up == rhs.is_group_bulk_load_context_cleaned_up))
      return false;
    if (__isset.is_group_bulk_load_paused != rhs.__isset.is_group_bulk_load_paused)
      return false;
    else if (__isset.is_group_bulk_load_paused && !(is_group_bulk_load_paused == rhs.is_group_bulk_load_paused))
      return false;
    if (__isset.total_downloaded_file_size != rhs.__isset.total_downloaded_file_size)
      return false;
    else if (__isset.total_downloaded_file_size && !(total_downloaded_file_size == rhs.total_downloaded_file_size))
      return false;
    return true;
  }
  bool operator != (const bulk_load_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bulk_load_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(bulk_load_response &a, bulk_load_response &b);

inline std::ostream& operator<<(std::ostream& out, const bulk_load_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _group_bulk_load_request__isset {
  _group_bulk_load_request__isset() : app_name(false), target_address(false), config(false), provider_name(false), cluster_name(false), meta_bulk_load_status(false), remote_root_path(false) {}
  bool app_name :1;
  bool target_address :1;
  bool config :1;
  bool provider_name :1;
  bool cluster_name :1;
  bool meta_bulk_load_status :1;
  bool remote_root_path :1;
} _group_bulk_load_request__isset;

class group_bulk_load_request {
 public:

  group_bulk_load_request(const group_bulk_load_request&);
  group_bulk_load_request& operator=(const group_bulk_load_request&);
  group_bulk_load_request() : app_name(), provider_name(), cluster_name(), meta_bulk_load_status((bulk_load_status::type)0), remote_root_path() {
  }

  virtual ~group_bulk_load_request() throw();
  std::string app_name;
   ::dsn::rpc_address target_address;
   ::dsn::replication::replica_configuration config;
  std::string provider_name;
  std::string cluster_name;
  bulk_load_status::type meta_bulk_load_status;
  std::string remote_root_path;

  _group_bulk_load_request__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_target_address(const  ::dsn::rpc_address& val);

  void __set_config(const  ::dsn::replication::replica_configuration& val);

  void __set_provider_name(const std::string& val);

  void __set_cluster_name(const std::string& val);

  void __set_meta_bulk_load_status(const bulk_load_status::type val);

  void __set_remote_root_path(const std::string& val);

  bool operator == (const group_bulk_load_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (!(target_address == rhs.target_address))
      return false;
    if (!(config == rhs.config))
      return false;
    if (!(provider_name == rhs.provider_name))
      return false;
    if (!(cluster_name == rhs.cluster_name))
      return false;
    if (!(meta_bulk_load_status == rhs.meta_bulk_load_status))
      return false;
    if (!(remote_root_path == rhs.remote_root_path))
      return false;
    return true;
  }
  bool operator != (const group_bulk_load_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const group_bulk_load_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(group_bulk_load_request &a, group_bulk_load_request &b);

inline std::ostream& operator<<(std::ostream& out, const group_bulk_load_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _group_bulk_load_response__isset {
  _group_bulk_load_response__isset() : err(false), status(false), bulk_load_state(false) {}
  bool err :1;
  bool status :1;
  bool bulk_load_state :1;
} _group_bulk_load_response__isset;

class group_bulk_load_response {
 public:

  group_bulk_load_response(const group_bulk_load_response&);
  group_bulk_load_response& operator=(const group_bulk_load_response&);
  group_bulk_load_response() : status((bulk_load_status::type)0) {
  }

  virtual ~group_bulk_load_response() throw();
   ::dsn::error_code err;
  bulk_load_status::type status;
  partition_bulk_load_state bulk_load_state;

  _group_bulk_load_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_status(const bulk_load_status::type val);

  void __set_bulk_load_state(const partition_bulk_load_state& val);

  bool operator == (const group_bulk_load_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(bulk_load_state == rhs.bulk_load_state))
      return false;
    return true;
  }
  bool operator != (const group_bulk_load_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const group_bulk_load_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(group_bulk_load_response &a, group_bulk_load_response &b);

inline std::ostream& operator<<(std::ostream& out, const group_bulk_load_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ingestion_request__isset {
  _ingestion_request__isset() : app_name(false), metadata(false), ingest_behind(false), ballot(false), verify_before_ingest(false) {}
  bool app_name :1;
  bool metadata :1;
  bool ingest_behind :1;
  bool ballot :1;
  bool verify_before_ingest :1;
} _ingestion_request__isset;

class ingestion_request {
 public:

  ingestion_request(const ingestion_request&);
  ingestion_request& operator=(const ingestion_request&);
  ingestion_request() : app_name(), ingest_behind(0), ballot(0), verify_before_ingest(0) {
  }

  virtual ~ingestion_request() throw();
  std::string app_name;
  bulk_load_metadata metadata;
  bool ingest_behind;
  int64_t ballot;
  bool verify_before_ingest;

  _ingestion_request__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_metadata(const bulk_load_metadata& val);

  void __set_ingest_behind(const bool val);

  void __set_ballot(const int64_t val);

  void __set_verify_before_ingest(const bool val);

  bool operator == (const ingestion_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (!(metadata == rhs.metadata))
      return false;
    if (!(ingest_behind == rhs.ingest_behind))
      return false;
    if (!(ballot == rhs.ballot))
      return false;
    if (!(verify_before_ingest == rhs.verify_before_ingest))
      return false;
    return true;
  }
  bool operator != (const ingestion_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ingestion_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ingestion_request &a, ingestion_request &b);

inline std::ostream& operator<<(std::ostream& out, const ingestion_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ingestion_response__isset {
  _ingestion_response__isset() : err(false), rocksdb_error(false) {}
  bool err :1;
  bool rocksdb_error :1;
} _ingestion_response__isset;

class ingestion_response {
 public:

  ingestion_response(const ingestion_response&);
  ingestion_response& operator=(const ingestion_response&);
  ingestion_response() : rocksdb_error(0) {
  }

  virtual ~ingestion_response() throw();
   ::dsn::error_code err;
  int32_t rocksdb_error;

  _ingestion_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_rocksdb_error(const int32_t val);

  bool operator == (const ingestion_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(rocksdb_error == rhs.rocksdb_error))
      return false;
    return true;
  }
  bool operator != (const ingestion_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ingestion_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ingestion_response &a, ingestion_response &b);

inline std::ostream& operator<<(std::ostream& out, const ingestion_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _control_bulk_load_request__isset {
  _control_bulk_load_request__isset() : app_name(false), type(false) {}
  bool app_name :1;
  bool type :1;
} _control_bulk_load_request__isset;

class control_bulk_load_request {
 public:

  control_bulk_load_request(const control_bulk_load_request&);
  control_bulk_load_request& operator=(const control_bulk_load_request&);
  control_bulk_load_request() : app_name(), type((bulk_load_control_type::type)0) {
  }

  virtual ~control_bulk_load_request() throw();
  std::string app_name;
  bulk_load_control_type::type type;

  _control_bulk_load_request__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_type(const bulk_load_control_type::type val);

  bool operator == (const control_bulk_load_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const control_bulk_load_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const control_bulk_load_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(control_bulk_load_request &a, control_bulk_load_request &b);

inline std::ostream& operator<<(std::ostream& out, const control_bulk_load_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _control_bulk_load_response__isset {
  _control_bulk_load_response__isset() : err(false), hint_msg(false) {}
  bool err :1;
  bool hint_msg :1;
} _control_bulk_load_response__isset;

class control_bulk_load_response {
 public:

  control_bulk_load_response(const control_bulk_load_response&);
  control_bulk_load_response& operator=(const control_bulk_load_response&);
  control_bulk_load_response() : hint_msg() {
  }

  virtual ~control_bulk_load_response() throw();
   ::dsn::error_code err;
  std::string hint_msg;

  _control_bulk_load_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_hint_msg(const std::string& val);

  bool operator == (const control_bulk_load_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (__isset.hint_msg != rhs.__isset.hint_msg)
      return false;
    else if (__isset.hint_msg && !(hint_msg == rhs.hint_msg))
      return false;
    return true;
  }
  bool operator != (const control_bulk_load_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const control_bulk_load_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(control_bulk_load_response &a, control_bulk_load_response &b);

inline std::ostream& operator<<(std::ostream& out, const control_bulk_load_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _query_bulk_load_request__isset {
  _query_bulk_load_request__isset() : app_name(false) {}
  bool app_name :1;
} _query_bulk_load_request__isset;

class query_bulk_load_request {
 public:

  query_bulk_load_request(const query_bulk_load_request&);
  query_bulk_load_request& operator=(const query_bulk_load_request&);
  query_bulk_load_request() : app_name() {
  }

  virtual ~query_bulk_load_request() throw();
  std::string app_name;

  _query_bulk_load_request__isset __isset;

  void __set_app_name(const std::string& val);

  bool operator == (const query_bulk_load_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    return true;
  }
  bool operator != (const query_bulk_load_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const query_bulk_load_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(query_bulk_load_request &a, query_bulk_load_request &b);

inline std::ostream& operator<<(std::ostream& out, const query_bulk_load_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _query_bulk_load_response__isset {
  _query_bulk_load_response__isset() : err(false), app_name(false), app_status(false), partitions_status(false), max_replica_count(false), bulk_load_states(false), hint_msg(false), is_bulk_loading(false) {}
  bool err :1;
  bool app_name :1;
  bool app_status :1;
  bool partitions_status :1;
  bool max_replica_count :1;
  bool bulk_load_states :1;
  bool hint_msg :1;
  bool is_bulk_loading :1;
} _query_bulk_load_response__isset;

class query_bulk_load_response {
 public:

  query_bulk_load_response(const query_bulk_load_response&);
  query_bulk_load_response& operator=(const query_bulk_load_response&);
  query_bulk_load_response() : app_name(), app_status((bulk_load_status::type)0), max_replica_count(0), hint_msg(), is_bulk_loading(0) {
  }

  virtual ~query_bulk_load_response() throw();
   ::dsn::error_code err;
  std::string app_name;
  bulk_load_status::type app_status;
  std::vector<bulk_load_status::type>  partitions_status;
  int32_t max_replica_count;
  std::vector<std::map< ::dsn::rpc_address, partition_bulk_load_state> >  bulk_load_states;
  std::string hint_msg;
  bool is_bulk_loading;

  _query_bulk_load_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_app_name(const std::string& val);

  void __set_app_status(const bulk_load_status::type val);

  void __set_partitions_status(const std::vector<bulk_load_status::type> & val);

  void __set_max_replica_count(const int32_t val);

  void __set_bulk_load_states(const std::vector<std::map< ::dsn::rpc_address, partition_bulk_load_state> > & val);

  void __set_hint_msg(const std::string& val);

  void __set_is_bulk_loading(const bool val);

  bool operator == (const query_bulk_load_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(app_name == rhs.app_name))
      return false;
    if (!(app_status == rhs.app_status))
      return false;
    if (!(partitions_status == rhs.partitions_status))
      return false;
    if (!(max_replica_count == rhs.max_replica_count))
      return false;
    if (!(bulk_load_states == rhs.bulk_load_states))
      return false;
    if (__isset.hint_msg != rhs.__isset.hint_msg)
      return false;
    else if (__isset.hint_msg && !(hint_msg == rhs.hint_msg))
      return false;
    if (__isset.is_bulk_loading != rhs.__isset.is_bulk_loading)
      return false;
    else if (__isset.is_bulk_loading && !(is_bulk_loading == rhs.is_bulk_loading))
      return false;
    return true;
  }
  bool operator != (const query_bulk_load_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const query_bulk_load_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(query_bulk_load_response &a, query_bulk_load_response &b);

inline std::ostream& operator<<(std::ostream& out, const query_bulk_load_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _clear_bulk_load_state_request__isset {
  _clear_bulk_load_state_request__isset() : app_name(false) {}
  bool app_name :1;
} _clear_bulk_load_state_request__isset;

class clear_bulk_load_state_request {
 public:

  clear_bulk_load_state_request(const clear_bulk_load_state_request&);
  clear_bulk_load_state_request& operator=(const clear_bulk_load_state_request&);
  clear_bulk_load_state_request() : app_name() {
  }

  virtual ~clear_bulk_load_state_request() throw();
  std::string app_name;

  _clear_bulk_load_state_request__isset __isset;

  void __set_app_name(const std::string& val);

  bool operator == (const clear_bulk_load_state_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    return true;
  }
  bool operator != (const clear_bulk_load_state_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const clear_bulk_load_state_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(clear_bulk_load_state_request &a, clear_bulk_load_state_request &b);

inline std::ostream& operator<<(std::ostream& out, const clear_bulk_load_state_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _clear_bulk_load_state_response__isset {
  _clear_bulk_load_state_response__isset() : err(false), hint_msg(false) {}
  bool err :1;
  bool hint_msg :1;
} _clear_bulk_load_state_response__isset;

class clear_bulk_load_state_response {
 public:

  clear_bulk_load_state_response(const clear_bulk_load_state_response&);
  clear_bulk_load_state_response& operator=(const clear_bulk_load_state_response&);
  clear_bulk_load_state_response() : hint_msg() {
  }

  virtual ~clear_bulk_load_state_response() throw();
   ::dsn::error_code err;
  std::string hint_msg;

  _clear_bulk_load_state_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_hint_msg(const std::string& val);

  bool operator == (const clear_bulk_load_state_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(hint_msg == rhs.hint_msg))
      return false;
    return true;
  }
  bool operator != (const clear_bulk_load_state_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const clear_bulk_load_state_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(clear_bulk_load_state_response &a, clear_bulk_load_state_response &b);

inline std::ostream& operator<<(std::ostream& out, const clear_bulk_load_state_response& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
