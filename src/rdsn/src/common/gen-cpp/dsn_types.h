/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dsn_TYPES_H
#define dsn_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace dsn {

class rpc_address;

class blob;

class error_code;

class task_code;

class gpid;


class rpc_address {
 public:

  rpc_address(const rpc_address&);
  rpc_address& operator=(const rpc_address&);
  rpc_address() {
  }

  virtual ~rpc_address() throw();

  bool operator == (const rpc_address & /* rhs */) const
  {
    return true;
  }
  bool operator != (const rpc_address &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_address & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rpc_address &a, rpc_address &b);

inline std::ostream& operator<<(std::ostream& out, const rpc_address& obj)
{
  obj.printTo(out);
  return out;
}


class blob {
 public:

  blob(const blob&);
  blob& operator=(const blob&);
  blob() {
  }

  virtual ~blob() throw();

  bool operator == (const blob & /* rhs */) const
  {
    return true;
  }
  bool operator != (const blob &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const blob & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(blob &a, blob &b);

inline std::ostream& operator<<(std::ostream& out, const blob& obj)
{
  obj.printTo(out);
  return out;
}


class error_code {
 public:

  error_code(const error_code&);
  error_code& operator=(const error_code&);
  error_code() {
  }

  virtual ~error_code() throw();

  bool operator == (const error_code & /* rhs */) const
  {
    return true;
  }
  bool operator != (const error_code &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const error_code & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(error_code &a, error_code &b);

inline std::ostream& operator<<(std::ostream& out, const error_code& obj)
{
  obj.printTo(out);
  return out;
}


class task_code {
 public:

  task_code(const task_code&);
  task_code& operator=(const task_code&);
  task_code() {
  }

  virtual ~task_code() throw();

  bool operator == (const task_code & /* rhs */) const
  {
    return true;
  }
  bool operator != (const task_code &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const task_code & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(task_code &a, task_code &b);

inline std::ostream& operator<<(std::ostream& out, const task_code& obj)
{
  obj.printTo(out);
  return out;
}


class gpid {
 public:

  gpid(const gpid&);
  gpid& operator=(const gpid&);
  gpid() {
  }

  virtual ~gpid() throw();

  bool operator == (const gpid & /* rhs */) const
  {
    return true;
  }
  bool operator != (const gpid &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const gpid & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(gpid &a, gpid &b);

inline std::ostream& operator<<(std::ostream& out, const gpid& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
