/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef meta_admin_TYPES_H
#define meta_admin_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "dsn_types.h"
#include "dsn.layer2_types.h"
#include "metadata_types.h"


namespace dsn { namespace replication {

struct config_type {
  enum type {
    CT_INVALID = 0,
    CT_ASSIGN_PRIMARY = 1,
    CT_UPGRADE_TO_PRIMARY = 2,
    CT_ADD_SECONDARY = 3,
    CT_UPGRADE_TO_SECONDARY = 4,
    CT_DOWNGRADE_TO_SECONDARY = 5,
    CT_DOWNGRADE_TO_INACTIVE = 6,
    CT_REMOVE = 7,
    CT_ADD_SECONDARY_FOR_LB = 8,
    CT_PRIMARY_FORCE_UPDATE_BALLOT = 9,
    CT_DROP_PARTITION = 10,
    CT_REGISTER_CHILD = 11
  };
};

extern const std::map<int, const char*> _config_type_VALUES_TO_NAMES;

struct node_status {
  enum type {
    NS_INVALID = 0,
    NS_ALIVE = 1,
    NS_UNALIVE = 2
  };
};

extern const std::map<int, const char*> _node_status_VALUES_TO_NAMES;

struct app_env_operation {
  enum type {
    APP_ENV_OP_INVALID = 0,
    APP_ENV_OP_SET = 1,
    APP_ENV_OP_DEL = 2,
    APP_ENV_OP_CLEAR = 3
  };
};

extern const std::map<int, const char*> _app_env_operation_VALUES_TO_NAMES;

struct meta_function_level {
  enum type {
    fl_stopped = 100,
    fl_blind = 200,
    fl_freezed = 300,
    fl_steady = 400,
    fl_lively = 500,
    fl_invalid = 10000
  };
};

extern const std::map<int, const char*> _meta_function_level_VALUES_TO_NAMES;

struct balancer_request_type {
  enum type {
    move_primary = 0,
    copy_primary = 1,
    copy_secondary = 2
  };
};

extern const std::map<int, const char*> _balancer_request_type_VALUES_TO_NAMES;

class configuration_update_request;

class configuration_update_response;

class replica_server_info;

class configuration_query_by_node_request;

class configuration_query_by_node_response;

class configuration_recovery_request;

class configuration_recovery_response;

class create_app_options;

class configuration_create_app_request;

class configuration_create_app_response;

class drop_app_options;

class configuration_drop_app_request;

class configuration_drop_app_response;

class configuration_recall_app_request;

class configuration_recall_app_response;

class configuration_list_apps_request;

class configuration_list_apps_response;

class query_app_info_request;

class query_app_info_response;

class configuration_update_app_env_request;

class configuration_update_app_env_response;

class start_app_manual_compact_request;

class start_app_manual_compact_response;

class query_app_manual_compact_request;

class query_app_manual_compact_response;

class node_info;

class configuration_list_nodes_request;

class configuration_list_nodes_response;

class configuration_cluster_info_request;

class configuration_cluster_info_response;

class configuration_meta_control_request;

class configuration_meta_control_response;

class configuration_proposal_action;

class configuration_balancer_request;

class configuration_balancer_response;

class ddd_diagnose_request;

class ddd_node_info;

class ddd_partition_info;

class ddd_diagnose_response;

class configuration_get_max_replica_count_request;

class configuration_get_max_replica_count_response;

class configuration_set_max_replica_count_request;

class configuration_set_max_replica_count_response;

typedef struct _configuration_update_request__isset {
  _configuration_update_request__isset() : info(false), config(false), type(true), node(false), host_node(false), meta_split_status(false) {}
  bool info :1;
  bool config :1;
  bool type :1;
  bool node :1;
  bool host_node :1;
  bool meta_split_status :1;
} _configuration_update_request__isset;

class configuration_update_request {
 public:

  configuration_update_request(const configuration_update_request&);
  configuration_update_request& operator=(const configuration_update_request&);
  configuration_update_request() : type((config_type::type)0), meta_split_status(( ::dsn::replication::split_status::type)0) {
    type = (config_type::type)0;

  }

  virtual ~configuration_update_request() throw();
   ::dsn::app_info info;
   ::dsn::partition_configuration config;
  config_type::type type;
   ::dsn::rpc_address node;
   ::dsn::rpc_address host_node;
   ::dsn::replication::split_status::type meta_split_status;

  _configuration_update_request__isset __isset;

  void __set_info(const  ::dsn::app_info& val);

  void __set_config(const  ::dsn::partition_configuration& val);

  void __set_type(const config_type::type val);

  void __set_node(const  ::dsn::rpc_address& val);

  void __set_host_node(const  ::dsn::rpc_address& val);

  void __set_meta_split_status(const  ::dsn::replication::split_status::type val);

  bool operator == (const configuration_update_request & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    if (!(config == rhs.config))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(node == rhs.node))
      return false;
    if (!(host_node == rhs.host_node))
      return false;
    if (__isset.meta_split_status != rhs.__isset.meta_split_status)
      return false;
    else if (__isset.meta_split_status && !(meta_split_status == rhs.meta_split_status))
      return false;
    return true;
  }
  bool operator != (const configuration_update_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_update_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_update_request &a, configuration_update_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_update_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_update_response__isset {
  _configuration_update_response__isset() : err(false), config(false) {}
  bool err :1;
  bool config :1;
} _configuration_update_response__isset;

class configuration_update_response {
 public:

  configuration_update_response(const configuration_update_response&);
  configuration_update_response& operator=(const configuration_update_response&);
  configuration_update_response() {
  }

  virtual ~configuration_update_response() throw();
   ::dsn::error_code err;
   ::dsn::partition_configuration config;

  _configuration_update_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_config(const  ::dsn::partition_configuration& val);

  bool operator == (const configuration_update_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(config == rhs.config))
      return false;
    return true;
  }
  bool operator != (const configuration_update_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_update_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_update_response &a, configuration_update_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_update_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _replica_server_info__isset {
  _replica_server_info__isset() : geo_tags(false), total_capacity_mb(false) {}
  bool geo_tags :1;
  bool total_capacity_mb :1;
} _replica_server_info__isset;

class replica_server_info {
 public:

  replica_server_info(const replica_server_info&);
  replica_server_info& operator=(const replica_server_info&);
  replica_server_info() : total_capacity_mb(0) {
  }

  virtual ~replica_server_info() throw();
  std::map<std::string, std::string>  geo_tags;
  int64_t total_capacity_mb;

  _replica_server_info__isset __isset;

  void __set_geo_tags(const std::map<std::string, std::string> & val);

  void __set_total_capacity_mb(const int64_t val);

  bool operator == (const replica_server_info & rhs) const
  {
    if (!(geo_tags == rhs.geo_tags))
      return false;
    if (!(total_capacity_mb == rhs.total_capacity_mb))
      return false;
    return true;
  }
  bool operator != (const replica_server_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const replica_server_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(replica_server_info &a, replica_server_info &b);

inline std::ostream& operator<<(std::ostream& out, const replica_server_info& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_query_by_node_request__isset {
  _configuration_query_by_node_request__isset() : node(false), stored_replicas(false), info(false) {}
  bool node :1;
  bool stored_replicas :1;
  bool info :1;
} _configuration_query_by_node_request__isset;

class configuration_query_by_node_request {
 public:

  configuration_query_by_node_request(const configuration_query_by_node_request&);
  configuration_query_by_node_request& operator=(const configuration_query_by_node_request&);
  configuration_query_by_node_request() {
  }

  virtual ~configuration_query_by_node_request() throw();
   ::dsn::rpc_address node;
  std::vector< ::dsn::replication::replica_info>  stored_replicas;
  replica_server_info info;

  _configuration_query_by_node_request__isset __isset;

  void __set_node(const  ::dsn::rpc_address& val);

  void __set_stored_replicas(const std::vector< ::dsn::replication::replica_info> & val);

  void __set_info(const replica_server_info& val);

  bool operator == (const configuration_query_by_node_request & rhs) const
  {
    if (!(node == rhs.node))
      return false;
    if (__isset.stored_replicas != rhs.__isset.stored_replicas)
      return false;
    else if (__isset.stored_replicas && !(stored_replicas == rhs.stored_replicas))
      return false;
    if (__isset.info != rhs.__isset.info)
      return false;
    else if (__isset.info && !(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const configuration_query_by_node_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_query_by_node_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_query_by_node_request &a, configuration_query_by_node_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_query_by_node_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_query_by_node_response__isset {
  _configuration_query_by_node_response__isset() : err(false), partitions(false), gc_replicas(false) {}
  bool err :1;
  bool partitions :1;
  bool gc_replicas :1;
} _configuration_query_by_node_response__isset;

class configuration_query_by_node_response {
 public:

  configuration_query_by_node_response(const configuration_query_by_node_response&);
  configuration_query_by_node_response& operator=(const configuration_query_by_node_response&);
  configuration_query_by_node_response() {
  }

  virtual ~configuration_query_by_node_response() throw();
   ::dsn::error_code err;
  std::vector<configuration_update_request>  partitions;
  std::vector< ::dsn::replication::replica_info>  gc_replicas;

  _configuration_query_by_node_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_partitions(const std::vector<configuration_update_request> & val);

  void __set_gc_replicas(const std::vector< ::dsn::replication::replica_info> & val);

  bool operator == (const configuration_query_by_node_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(partitions == rhs.partitions))
      return false;
    if (__isset.gc_replicas != rhs.__isset.gc_replicas)
      return false;
    else if (__isset.gc_replicas && !(gc_replicas == rhs.gc_replicas))
      return false;
    return true;
  }
  bool operator != (const configuration_query_by_node_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_query_by_node_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_query_by_node_response &a, configuration_query_by_node_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_query_by_node_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_recovery_request__isset {
  _configuration_recovery_request__isset() : recovery_set(false), skip_bad_nodes(false), skip_lost_partitions(false) {}
  bool recovery_set :1;
  bool skip_bad_nodes :1;
  bool skip_lost_partitions :1;
} _configuration_recovery_request__isset;

class configuration_recovery_request {
 public:

  configuration_recovery_request(const configuration_recovery_request&);
  configuration_recovery_request& operator=(const configuration_recovery_request&);
  configuration_recovery_request() : skip_bad_nodes(0), skip_lost_partitions(0) {
  }

  virtual ~configuration_recovery_request() throw();
  std::vector< ::dsn::rpc_address>  recovery_set;
  bool skip_bad_nodes;
  bool skip_lost_partitions;

  _configuration_recovery_request__isset __isset;

  void __set_recovery_set(const std::vector< ::dsn::rpc_address> & val);

  void __set_skip_bad_nodes(const bool val);

  void __set_skip_lost_partitions(const bool val);

  bool operator == (const configuration_recovery_request & rhs) const
  {
    if (!(recovery_set == rhs.recovery_set))
      return false;
    if (!(skip_bad_nodes == rhs.skip_bad_nodes))
      return false;
    if (!(skip_lost_partitions == rhs.skip_lost_partitions))
      return false;
    return true;
  }
  bool operator != (const configuration_recovery_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_recovery_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_recovery_request &a, configuration_recovery_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_recovery_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_recovery_response__isset {
  _configuration_recovery_response__isset() : err(false), hint_message(false) {}
  bool err :1;
  bool hint_message :1;
} _configuration_recovery_response__isset;

class configuration_recovery_response {
 public:

  configuration_recovery_response(const configuration_recovery_response&);
  configuration_recovery_response& operator=(const configuration_recovery_response&);
  configuration_recovery_response() : hint_message() {
  }

  virtual ~configuration_recovery_response() throw();
   ::dsn::error_code err;
  std::string hint_message;

  _configuration_recovery_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_hint_message(const std::string& val);

  bool operator == (const configuration_recovery_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(hint_message == rhs.hint_message))
      return false;
    return true;
  }
  bool operator != (const configuration_recovery_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_recovery_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_recovery_response &a, configuration_recovery_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_recovery_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _create_app_options__isset {
  _create_app_options__isset() : partition_count(false), replica_count(false), success_if_exist(false), app_type(false), is_stateful(false), envs(false) {}
  bool partition_count :1;
  bool replica_count :1;
  bool success_if_exist :1;
  bool app_type :1;
  bool is_stateful :1;
  bool envs :1;
} _create_app_options__isset;

class create_app_options {
 public:

  create_app_options(const create_app_options&);
  create_app_options& operator=(const create_app_options&);
  create_app_options() : partition_count(0), replica_count(0), success_if_exist(0), app_type(), is_stateful(0) {
  }

  virtual ~create_app_options() throw();
  int32_t partition_count;
  int32_t replica_count;
  bool success_if_exist;
  std::string app_type;
  bool is_stateful;
  std::map<std::string, std::string>  envs;

  _create_app_options__isset __isset;

  void __set_partition_count(const int32_t val);

  void __set_replica_count(const int32_t val);

  void __set_success_if_exist(const bool val);

  void __set_app_type(const std::string& val);

  void __set_is_stateful(const bool val);

  void __set_envs(const std::map<std::string, std::string> & val);

  bool operator == (const create_app_options & rhs) const
  {
    if (!(partition_count == rhs.partition_count))
      return false;
    if (!(replica_count == rhs.replica_count))
      return false;
    if (!(success_if_exist == rhs.success_if_exist))
      return false;
    if (!(app_type == rhs.app_type))
      return false;
    if (!(is_stateful == rhs.is_stateful))
      return false;
    if (!(envs == rhs.envs))
      return false;
    return true;
  }
  bool operator != (const create_app_options &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const create_app_options & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(create_app_options &a, create_app_options &b);

inline std::ostream& operator<<(std::ostream& out, const create_app_options& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_create_app_request__isset {
  _configuration_create_app_request__isset() : app_name(false), options(false) {}
  bool app_name :1;
  bool options :1;
} _configuration_create_app_request__isset;

class configuration_create_app_request {
 public:

  configuration_create_app_request(const configuration_create_app_request&);
  configuration_create_app_request& operator=(const configuration_create_app_request&);
  configuration_create_app_request() : app_name() {
  }

  virtual ~configuration_create_app_request() throw();
  std::string app_name;
  create_app_options options;

  _configuration_create_app_request__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_options(const create_app_options& val);

  bool operator == (const configuration_create_app_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const configuration_create_app_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_create_app_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_create_app_request &a, configuration_create_app_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_create_app_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_create_app_response__isset {
  _configuration_create_app_response__isset() : err(false), appid(false) {}
  bool err :1;
  bool appid :1;
} _configuration_create_app_response__isset;

class configuration_create_app_response {
 public:

  configuration_create_app_response(const configuration_create_app_response&);
  configuration_create_app_response& operator=(const configuration_create_app_response&);
  configuration_create_app_response() : appid(0) {
  }

  virtual ~configuration_create_app_response() throw();
   ::dsn::error_code err;
  int32_t appid;

  _configuration_create_app_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_appid(const int32_t val);

  bool operator == (const configuration_create_app_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(appid == rhs.appid))
      return false;
    return true;
  }
  bool operator != (const configuration_create_app_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_create_app_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_create_app_response &a, configuration_create_app_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_create_app_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _drop_app_options__isset {
  _drop_app_options__isset() : success_if_not_exist(false), reserve_seconds(false) {}
  bool success_if_not_exist :1;
  bool reserve_seconds :1;
} _drop_app_options__isset;

class drop_app_options {
 public:

  drop_app_options(const drop_app_options&);
  drop_app_options& operator=(const drop_app_options&);
  drop_app_options() : success_if_not_exist(0), reserve_seconds(0) {
  }

  virtual ~drop_app_options() throw();
  bool success_if_not_exist;
  int64_t reserve_seconds;

  _drop_app_options__isset __isset;

  void __set_success_if_not_exist(const bool val);

  void __set_reserve_seconds(const int64_t val);

  bool operator == (const drop_app_options & rhs) const
  {
    if (!(success_if_not_exist == rhs.success_if_not_exist))
      return false;
    if (__isset.reserve_seconds != rhs.__isset.reserve_seconds)
      return false;
    else if (__isset.reserve_seconds && !(reserve_seconds == rhs.reserve_seconds))
      return false;
    return true;
  }
  bool operator != (const drop_app_options &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const drop_app_options & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(drop_app_options &a, drop_app_options &b);

inline std::ostream& operator<<(std::ostream& out, const drop_app_options& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_drop_app_request__isset {
  _configuration_drop_app_request__isset() : app_name(false), options(false) {}
  bool app_name :1;
  bool options :1;
} _configuration_drop_app_request__isset;

class configuration_drop_app_request {
 public:

  configuration_drop_app_request(const configuration_drop_app_request&);
  configuration_drop_app_request& operator=(const configuration_drop_app_request&);
  configuration_drop_app_request() : app_name() {
  }

  virtual ~configuration_drop_app_request() throw();
  std::string app_name;
  drop_app_options options;

  _configuration_drop_app_request__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_options(const drop_app_options& val);

  bool operator == (const configuration_drop_app_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const configuration_drop_app_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_drop_app_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_drop_app_request &a, configuration_drop_app_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_drop_app_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_drop_app_response__isset {
  _configuration_drop_app_response__isset() : err(false) {}
  bool err :1;
} _configuration_drop_app_response__isset;

class configuration_drop_app_response {
 public:

  configuration_drop_app_response(const configuration_drop_app_response&);
  configuration_drop_app_response& operator=(const configuration_drop_app_response&);
  configuration_drop_app_response() {
  }

  virtual ~configuration_drop_app_response() throw();
   ::dsn::error_code err;

  _configuration_drop_app_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  bool operator == (const configuration_drop_app_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const configuration_drop_app_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_drop_app_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_drop_app_response &a, configuration_drop_app_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_drop_app_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_recall_app_request__isset {
  _configuration_recall_app_request__isset() : app_id(false), new_app_name(false) {}
  bool app_id :1;
  bool new_app_name :1;
} _configuration_recall_app_request__isset;

class configuration_recall_app_request {
 public:

  configuration_recall_app_request(const configuration_recall_app_request&);
  configuration_recall_app_request& operator=(const configuration_recall_app_request&);
  configuration_recall_app_request() : app_id(0), new_app_name() {
  }

  virtual ~configuration_recall_app_request() throw();
  int32_t app_id;
  std::string new_app_name;

  _configuration_recall_app_request__isset __isset;

  void __set_app_id(const int32_t val);

  void __set_new_app_name(const std::string& val);

  bool operator == (const configuration_recall_app_request & rhs) const
  {
    if (!(app_id == rhs.app_id))
      return false;
    if (!(new_app_name == rhs.new_app_name))
      return false;
    return true;
  }
  bool operator != (const configuration_recall_app_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_recall_app_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_recall_app_request &a, configuration_recall_app_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_recall_app_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_recall_app_response__isset {
  _configuration_recall_app_response__isset() : err(false), info(false) {}
  bool err :1;
  bool info :1;
} _configuration_recall_app_response__isset;

class configuration_recall_app_response {
 public:

  configuration_recall_app_response(const configuration_recall_app_response&);
  configuration_recall_app_response& operator=(const configuration_recall_app_response&);
  configuration_recall_app_response() {
  }

  virtual ~configuration_recall_app_response() throw();
   ::dsn::error_code err;
   ::dsn::app_info info;

  _configuration_recall_app_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_info(const  ::dsn::app_info& val);

  bool operator == (const configuration_recall_app_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const configuration_recall_app_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_recall_app_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_recall_app_response &a, configuration_recall_app_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_recall_app_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_list_apps_request__isset {
  _configuration_list_apps_request__isset() : status(true) {}
  bool status :1;
} _configuration_list_apps_request__isset;

class configuration_list_apps_request {
 public:

  configuration_list_apps_request(const configuration_list_apps_request&);
  configuration_list_apps_request& operator=(const configuration_list_apps_request&);
  configuration_list_apps_request() : status(( ::dsn::app_status::type)0) {
    status = ( ::dsn::app_status::type)0;

  }

  virtual ~configuration_list_apps_request() throw();
   ::dsn::app_status::type status;

  _configuration_list_apps_request__isset __isset;

  void __set_status(const  ::dsn::app_status::type val);

  bool operator == (const configuration_list_apps_request & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const configuration_list_apps_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_list_apps_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_list_apps_request &a, configuration_list_apps_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_list_apps_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_list_apps_response__isset {
  _configuration_list_apps_response__isset() : err(false), infos(false) {}
  bool err :1;
  bool infos :1;
} _configuration_list_apps_response__isset;

class configuration_list_apps_response {
 public:

  configuration_list_apps_response(const configuration_list_apps_response&);
  configuration_list_apps_response& operator=(const configuration_list_apps_response&);
  configuration_list_apps_response() {
  }

  virtual ~configuration_list_apps_response() throw();
   ::dsn::error_code err;
  std::vector< ::dsn::app_info>  infos;

  _configuration_list_apps_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_infos(const std::vector< ::dsn::app_info> & val);

  bool operator == (const configuration_list_apps_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(infos == rhs.infos))
      return false;
    return true;
  }
  bool operator != (const configuration_list_apps_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_list_apps_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_list_apps_response &a, configuration_list_apps_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_list_apps_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _query_app_info_request__isset {
  _query_app_info_request__isset() : meta_server(false) {}
  bool meta_server :1;
} _query_app_info_request__isset;

class query_app_info_request {
 public:

  query_app_info_request(const query_app_info_request&);
  query_app_info_request& operator=(const query_app_info_request&);
  query_app_info_request() {
  }

  virtual ~query_app_info_request() throw();
   ::dsn::rpc_address meta_server;

  _query_app_info_request__isset __isset;

  void __set_meta_server(const  ::dsn::rpc_address& val);

  bool operator == (const query_app_info_request & rhs) const
  {
    if (!(meta_server == rhs.meta_server))
      return false;
    return true;
  }
  bool operator != (const query_app_info_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const query_app_info_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(query_app_info_request &a, query_app_info_request &b);

inline std::ostream& operator<<(std::ostream& out, const query_app_info_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _query_app_info_response__isset {
  _query_app_info_response__isset() : err(false), apps(false) {}
  bool err :1;
  bool apps :1;
} _query_app_info_response__isset;

class query_app_info_response {
 public:

  query_app_info_response(const query_app_info_response&);
  query_app_info_response& operator=(const query_app_info_response&);
  query_app_info_response() {
  }

  virtual ~query_app_info_response() throw();
   ::dsn::error_code err;
  std::vector< ::dsn::app_info>  apps;

  _query_app_info_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_apps(const std::vector< ::dsn::app_info> & val);

  bool operator == (const query_app_info_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(apps == rhs.apps))
      return false;
    return true;
  }
  bool operator != (const query_app_info_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const query_app_info_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(query_app_info_response &a, query_app_info_response &b);

inline std::ostream& operator<<(std::ostream& out, const query_app_info_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_update_app_env_request__isset {
  _configuration_update_app_env_request__isset() : app_name(false), op(true), keys(false), values(false), clear_prefix(false) {}
  bool app_name :1;
  bool op :1;
  bool keys :1;
  bool values :1;
  bool clear_prefix :1;
} _configuration_update_app_env_request__isset;

class configuration_update_app_env_request {
 public:

  configuration_update_app_env_request(const configuration_update_app_env_request&);
  configuration_update_app_env_request& operator=(const configuration_update_app_env_request&);
  configuration_update_app_env_request() : app_name(), op((app_env_operation::type)0), clear_prefix() {
    op = (app_env_operation::type)0;

  }

  virtual ~configuration_update_app_env_request() throw();
  std::string app_name;
  app_env_operation::type op;
  std::vector<std::string>  keys;
  std::vector<std::string>  values;
  std::string clear_prefix;

  _configuration_update_app_env_request__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_op(const app_env_operation::type val);

  void __set_keys(const std::vector<std::string> & val);

  void __set_values(const std::vector<std::string> & val);

  void __set_clear_prefix(const std::string& val);

  bool operator == (const configuration_update_app_env_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (!(op == rhs.op))
      return false;
    if (__isset.keys != rhs.__isset.keys)
      return false;
    else if (__isset.keys && !(keys == rhs.keys))
      return false;
    if (__isset.values != rhs.__isset.values)
      return false;
    else if (__isset.values && !(values == rhs.values))
      return false;
    if (__isset.clear_prefix != rhs.__isset.clear_prefix)
      return false;
    else if (__isset.clear_prefix && !(clear_prefix == rhs.clear_prefix))
      return false;
    return true;
  }
  bool operator != (const configuration_update_app_env_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_update_app_env_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_update_app_env_request &a, configuration_update_app_env_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_update_app_env_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_update_app_env_response__isset {
  _configuration_update_app_env_response__isset() : err(false), hint_message(false) {}
  bool err :1;
  bool hint_message :1;
} _configuration_update_app_env_response__isset;

class configuration_update_app_env_response {
 public:

  configuration_update_app_env_response(const configuration_update_app_env_response&);
  configuration_update_app_env_response& operator=(const configuration_update_app_env_response&);
  configuration_update_app_env_response() : hint_message() {
  }

  virtual ~configuration_update_app_env_response() throw();
   ::dsn::error_code err;
  std::string hint_message;

  _configuration_update_app_env_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_hint_message(const std::string& val);

  bool operator == (const configuration_update_app_env_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(hint_message == rhs.hint_message))
      return false;
    return true;
  }
  bool operator != (const configuration_update_app_env_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_update_app_env_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_update_app_env_response &a, configuration_update_app_env_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_update_app_env_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _start_app_manual_compact_request__isset {
  _start_app_manual_compact_request__isset() : app_name(false), trigger_time(false), target_level(false), bottommost(false), max_running_count(false) {}
  bool app_name :1;
  bool trigger_time :1;
  bool target_level :1;
  bool bottommost :1;
  bool max_running_count :1;
} _start_app_manual_compact_request__isset;

class start_app_manual_compact_request {
 public:

  start_app_manual_compact_request(const start_app_manual_compact_request&);
  start_app_manual_compact_request& operator=(const start_app_manual_compact_request&);
  start_app_manual_compact_request() : app_name(), trigger_time(0), target_level(0), bottommost(0), max_running_count(0) {
  }

  virtual ~start_app_manual_compact_request() throw();
  std::string app_name;
  int64_t trigger_time;
  int32_t target_level;
  bool bottommost;
  int32_t max_running_count;

  _start_app_manual_compact_request__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_trigger_time(const int64_t val);

  void __set_target_level(const int32_t val);

  void __set_bottommost(const bool val);

  void __set_max_running_count(const int32_t val);

  bool operator == (const start_app_manual_compact_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (__isset.trigger_time != rhs.__isset.trigger_time)
      return false;
    else if (__isset.trigger_time && !(trigger_time == rhs.trigger_time))
      return false;
    if (__isset.target_level != rhs.__isset.target_level)
      return false;
    else if (__isset.target_level && !(target_level == rhs.target_level))
      return false;
    if (__isset.bottommost != rhs.__isset.bottommost)
      return false;
    else if (__isset.bottommost && !(bottommost == rhs.bottommost))
      return false;
    if (__isset.max_running_count != rhs.__isset.max_running_count)
      return false;
    else if (__isset.max_running_count && !(max_running_count == rhs.max_running_count))
      return false;
    return true;
  }
  bool operator != (const start_app_manual_compact_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const start_app_manual_compact_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(start_app_manual_compact_request &a, start_app_manual_compact_request &b);

inline std::ostream& operator<<(std::ostream& out, const start_app_manual_compact_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _start_app_manual_compact_response__isset {
  _start_app_manual_compact_response__isset() : err(false), hint_msg(false) {}
  bool err :1;
  bool hint_msg :1;
} _start_app_manual_compact_response__isset;

class start_app_manual_compact_response {
 public:

  start_app_manual_compact_response(const start_app_manual_compact_response&);
  start_app_manual_compact_response& operator=(const start_app_manual_compact_response&);
  start_app_manual_compact_response() : hint_msg() {
  }

  virtual ~start_app_manual_compact_response() throw();
   ::dsn::error_code err;
  std::string hint_msg;

  _start_app_manual_compact_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_hint_msg(const std::string& val);

  bool operator == (const start_app_manual_compact_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(hint_msg == rhs.hint_msg))
      return false;
    return true;
  }
  bool operator != (const start_app_manual_compact_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const start_app_manual_compact_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(start_app_manual_compact_response &a, start_app_manual_compact_response &b);

inline std::ostream& operator<<(std::ostream& out, const start_app_manual_compact_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _query_app_manual_compact_request__isset {
  _query_app_manual_compact_request__isset() : app_name(false) {}
  bool app_name :1;
} _query_app_manual_compact_request__isset;

class query_app_manual_compact_request {
 public:

  query_app_manual_compact_request(const query_app_manual_compact_request&);
  query_app_manual_compact_request& operator=(const query_app_manual_compact_request&);
  query_app_manual_compact_request() : app_name() {
  }

  virtual ~query_app_manual_compact_request() throw();
  std::string app_name;

  _query_app_manual_compact_request__isset __isset;

  void __set_app_name(const std::string& val);

  bool operator == (const query_app_manual_compact_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    return true;
  }
  bool operator != (const query_app_manual_compact_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const query_app_manual_compact_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(query_app_manual_compact_request &a, query_app_manual_compact_request &b);

inline std::ostream& operator<<(std::ostream& out, const query_app_manual_compact_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _query_app_manual_compact_response__isset {
  _query_app_manual_compact_response__isset() : err(false), hint_msg(false), progress(false) {}
  bool err :1;
  bool hint_msg :1;
  bool progress :1;
} _query_app_manual_compact_response__isset;

class query_app_manual_compact_response {
 public:

  query_app_manual_compact_response(const query_app_manual_compact_response&);
  query_app_manual_compact_response& operator=(const query_app_manual_compact_response&);
  query_app_manual_compact_response() : hint_msg(), progress(0) {
  }

  virtual ~query_app_manual_compact_response() throw();
   ::dsn::error_code err;
  std::string hint_msg;
  int32_t progress;

  _query_app_manual_compact_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_hint_msg(const std::string& val);

  void __set_progress(const int32_t val);

  bool operator == (const query_app_manual_compact_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(hint_msg == rhs.hint_msg))
      return false;
    if (__isset.progress != rhs.__isset.progress)
      return false;
    else if (__isset.progress && !(progress == rhs.progress))
      return false;
    return true;
  }
  bool operator != (const query_app_manual_compact_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const query_app_manual_compact_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(query_app_manual_compact_response &a, query_app_manual_compact_response &b);

inline std::ostream& operator<<(std::ostream& out, const query_app_manual_compact_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _node_info__isset {
  _node_info__isset() : status(true), address(false) {}
  bool status :1;
  bool address :1;
} _node_info__isset;

class node_info {
 public:

  node_info(const node_info&);
  node_info& operator=(const node_info&);
  node_info() : status((node_status::type)0) {
    status = (node_status::type)0;

  }

  virtual ~node_info() throw();
  node_status::type status;
   ::dsn::rpc_address address;

  _node_info__isset __isset;

  void __set_status(const node_status::type val);

  void __set_address(const  ::dsn::rpc_address& val);

  bool operator == (const node_info & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const node_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_info &a, node_info &b);

inline std::ostream& operator<<(std::ostream& out, const node_info& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_list_nodes_request__isset {
  _configuration_list_nodes_request__isset() : status(true) {}
  bool status :1;
} _configuration_list_nodes_request__isset;

class configuration_list_nodes_request {
 public:

  configuration_list_nodes_request(const configuration_list_nodes_request&);
  configuration_list_nodes_request& operator=(const configuration_list_nodes_request&);
  configuration_list_nodes_request() : status((node_status::type)0) {
    status = (node_status::type)0;

  }

  virtual ~configuration_list_nodes_request() throw();
  node_status::type status;

  _configuration_list_nodes_request__isset __isset;

  void __set_status(const node_status::type val);

  bool operator == (const configuration_list_nodes_request & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const configuration_list_nodes_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_list_nodes_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_list_nodes_request &a, configuration_list_nodes_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_list_nodes_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_list_nodes_response__isset {
  _configuration_list_nodes_response__isset() : err(false), infos(false) {}
  bool err :1;
  bool infos :1;
} _configuration_list_nodes_response__isset;

class configuration_list_nodes_response {
 public:

  configuration_list_nodes_response(const configuration_list_nodes_response&);
  configuration_list_nodes_response& operator=(const configuration_list_nodes_response&);
  configuration_list_nodes_response() {
  }

  virtual ~configuration_list_nodes_response() throw();
   ::dsn::error_code err;
  std::vector<node_info>  infos;

  _configuration_list_nodes_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_infos(const std::vector<node_info> & val);

  bool operator == (const configuration_list_nodes_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(infos == rhs.infos))
      return false;
    return true;
  }
  bool operator != (const configuration_list_nodes_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_list_nodes_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_list_nodes_response &a, configuration_list_nodes_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_list_nodes_response& obj)
{
  obj.printTo(out);
  return out;
}


class configuration_cluster_info_request {
 public:

  configuration_cluster_info_request(const configuration_cluster_info_request&);
  configuration_cluster_info_request& operator=(const configuration_cluster_info_request&);
  configuration_cluster_info_request() {
  }

  virtual ~configuration_cluster_info_request() throw();

  bool operator == (const configuration_cluster_info_request & /* rhs */) const
  {
    return true;
  }
  bool operator != (const configuration_cluster_info_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_cluster_info_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_cluster_info_request &a, configuration_cluster_info_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_cluster_info_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_cluster_info_response__isset {
  _configuration_cluster_info_response__isset() : err(false), keys(false), values(false) {}
  bool err :1;
  bool keys :1;
  bool values :1;
} _configuration_cluster_info_response__isset;

class configuration_cluster_info_response {
 public:

  configuration_cluster_info_response(const configuration_cluster_info_response&);
  configuration_cluster_info_response& operator=(const configuration_cluster_info_response&);
  configuration_cluster_info_response() {
  }

  virtual ~configuration_cluster_info_response() throw();
   ::dsn::error_code err;
  std::vector<std::string>  keys;
  std::vector<std::string>  values;

  _configuration_cluster_info_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_keys(const std::vector<std::string> & val);

  void __set_values(const std::vector<std::string> & val);

  bool operator == (const configuration_cluster_info_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(keys == rhs.keys))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const configuration_cluster_info_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_cluster_info_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_cluster_info_response &a, configuration_cluster_info_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_cluster_info_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_meta_control_request__isset {
  _configuration_meta_control_request__isset() : level(false) {}
  bool level :1;
} _configuration_meta_control_request__isset;

class configuration_meta_control_request {
 public:

  configuration_meta_control_request(const configuration_meta_control_request&);
  configuration_meta_control_request& operator=(const configuration_meta_control_request&);
  configuration_meta_control_request() : level((meta_function_level::type)0) {
  }

  virtual ~configuration_meta_control_request() throw();
  meta_function_level::type level;

  _configuration_meta_control_request__isset __isset;

  void __set_level(const meta_function_level::type val);

  bool operator == (const configuration_meta_control_request & rhs) const
  {
    if (!(level == rhs.level))
      return false;
    return true;
  }
  bool operator != (const configuration_meta_control_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_meta_control_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_meta_control_request &a, configuration_meta_control_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_meta_control_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_meta_control_response__isset {
  _configuration_meta_control_response__isset() : err(false), old_level(false) {}
  bool err :1;
  bool old_level :1;
} _configuration_meta_control_response__isset;

class configuration_meta_control_response {
 public:

  configuration_meta_control_response(const configuration_meta_control_response&);
  configuration_meta_control_response& operator=(const configuration_meta_control_response&);
  configuration_meta_control_response() : old_level((meta_function_level::type)0) {
  }

  virtual ~configuration_meta_control_response() throw();
   ::dsn::error_code err;
  meta_function_level::type old_level;

  _configuration_meta_control_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_old_level(const meta_function_level::type val);

  bool operator == (const configuration_meta_control_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(old_level == rhs.old_level))
      return false;
    return true;
  }
  bool operator != (const configuration_meta_control_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_meta_control_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_meta_control_response &a, configuration_meta_control_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_meta_control_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_proposal_action__isset {
  _configuration_proposal_action__isset() : target(false), node(false), type(false) {}
  bool target :1;
  bool node :1;
  bool type :1;
} _configuration_proposal_action__isset;

class configuration_proposal_action {
 public:

  configuration_proposal_action(const configuration_proposal_action&);
  configuration_proposal_action& operator=(const configuration_proposal_action&);
  configuration_proposal_action() : type((config_type::type)0) {
  }

  virtual ~configuration_proposal_action() throw();
   ::dsn::rpc_address target;
   ::dsn::rpc_address node;
  config_type::type type;

  _configuration_proposal_action__isset __isset;

  void __set_target(const  ::dsn::rpc_address& val);

  void __set_node(const  ::dsn::rpc_address& val);

  void __set_type(const config_type::type val);

  bool operator == (const configuration_proposal_action & rhs) const
  {
    if (!(target == rhs.target))
      return false;
    if (!(node == rhs.node))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const configuration_proposal_action &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_proposal_action & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_proposal_action &a, configuration_proposal_action &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_proposal_action& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_balancer_request__isset {
  _configuration_balancer_request__isset() : gpid(false), action_list(false), force(true), balance_type(false) {}
  bool gpid :1;
  bool action_list :1;
  bool force :1;
  bool balance_type :1;
} _configuration_balancer_request__isset;

class configuration_balancer_request {
 public:

  configuration_balancer_request(const configuration_balancer_request&);
  configuration_balancer_request& operator=(const configuration_balancer_request&);
  configuration_balancer_request() : force(false), balance_type((balancer_request_type::type)0) {
  }

  virtual ~configuration_balancer_request() throw();
   ::dsn::gpid gpid;
  std::vector<configuration_proposal_action>  action_list;
  bool force;
  balancer_request_type::type balance_type;

  _configuration_balancer_request__isset __isset;

  void __set_gpid(const  ::dsn::gpid& val);

  void __set_action_list(const std::vector<configuration_proposal_action> & val);

  void __set_force(const bool val);

  void __set_balance_type(const balancer_request_type::type val);

  bool operator == (const configuration_balancer_request & rhs) const
  {
    if (!(gpid == rhs.gpid))
      return false;
    if (!(action_list == rhs.action_list))
      return false;
    if (__isset.force != rhs.__isset.force)
      return false;
    else if (__isset.force && !(force == rhs.force))
      return false;
    if (__isset.balance_type != rhs.__isset.balance_type)
      return false;
    else if (__isset.balance_type && !(balance_type == rhs.balance_type))
      return false;
    return true;
  }
  bool operator != (const configuration_balancer_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_balancer_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_balancer_request &a, configuration_balancer_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_balancer_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_balancer_response__isset {
  _configuration_balancer_response__isset() : err(false) {}
  bool err :1;
} _configuration_balancer_response__isset;

class configuration_balancer_response {
 public:

  configuration_balancer_response(const configuration_balancer_response&);
  configuration_balancer_response& operator=(const configuration_balancer_response&);
  configuration_balancer_response() {
  }

  virtual ~configuration_balancer_response() throw();
   ::dsn::error_code err;

  _configuration_balancer_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  bool operator == (const configuration_balancer_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const configuration_balancer_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_balancer_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_balancer_response &a, configuration_balancer_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_balancer_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ddd_diagnose_request__isset {
  _ddd_diagnose_request__isset() : pid(false) {}
  bool pid :1;
} _ddd_diagnose_request__isset;

class ddd_diagnose_request {
 public:

  ddd_diagnose_request(const ddd_diagnose_request&);
  ddd_diagnose_request& operator=(const ddd_diagnose_request&);
  ddd_diagnose_request() {
  }

  virtual ~ddd_diagnose_request() throw();
   ::dsn::gpid pid;

  _ddd_diagnose_request__isset __isset;

  void __set_pid(const  ::dsn::gpid& val);

  bool operator == (const ddd_diagnose_request & rhs) const
  {
    if (!(pid == rhs.pid))
      return false;
    return true;
  }
  bool operator != (const ddd_diagnose_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ddd_diagnose_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ddd_diagnose_request &a, ddd_diagnose_request &b);

inline std::ostream& operator<<(std::ostream& out, const ddd_diagnose_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ddd_node_info__isset {
  _ddd_node_info__isset() : node(false), drop_time_ms(false), is_alive(false), is_collected(false), ballot(false), last_committed_decree(false), last_prepared_decree(false) {}
  bool node :1;
  bool drop_time_ms :1;
  bool is_alive :1;
  bool is_collected :1;
  bool ballot :1;
  bool last_committed_decree :1;
  bool last_prepared_decree :1;
} _ddd_node_info__isset;

class ddd_node_info {
 public:

  ddd_node_info(const ddd_node_info&);
  ddd_node_info& operator=(const ddd_node_info&);
  ddd_node_info() : drop_time_ms(0), is_alive(0), is_collected(0), ballot(0), last_committed_decree(0), last_prepared_decree(0) {
  }

  virtual ~ddd_node_info() throw();
   ::dsn::rpc_address node;
  int64_t drop_time_ms;
  bool is_alive;
  bool is_collected;
  int64_t ballot;
  int64_t last_committed_decree;
  int64_t last_prepared_decree;

  _ddd_node_info__isset __isset;

  void __set_node(const  ::dsn::rpc_address& val);

  void __set_drop_time_ms(const int64_t val);

  void __set_is_alive(const bool val);

  void __set_is_collected(const bool val);

  void __set_ballot(const int64_t val);

  void __set_last_committed_decree(const int64_t val);

  void __set_last_prepared_decree(const int64_t val);

  bool operator == (const ddd_node_info & rhs) const
  {
    if (!(node == rhs.node))
      return false;
    if (!(drop_time_ms == rhs.drop_time_ms))
      return false;
    if (!(is_alive == rhs.is_alive))
      return false;
    if (!(is_collected == rhs.is_collected))
      return false;
    if (!(ballot == rhs.ballot))
      return false;
    if (!(last_committed_decree == rhs.last_committed_decree))
      return false;
    if (!(last_prepared_decree == rhs.last_prepared_decree))
      return false;
    return true;
  }
  bool operator != (const ddd_node_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ddd_node_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ddd_node_info &a, ddd_node_info &b);

inline std::ostream& operator<<(std::ostream& out, const ddd_node_info& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ddd_partition_info__isset {
  _ddd_partition_info__isset() : config(false), dropped(false), reason(false) {}
  bool config :1;
  bool dropped :1;
  bool reason :1;
} _ddd_partition_info__isset;

class ddd_partition_info {
 public:

  ddd_partition_info(const ddd_partition_info&);
  ddd_partition_info& operator=(const ddd_partition_info&);
  ddd_partition_info() : reason() {
  }

  virtual ~ddd_partition_info() throw();
   ::dsn::partition_configuration config;
  std::vector<ddd_node_info>  dropped;
  std::string reason;

  _ddd_partition_info__isset __isset;

  void __set_config(const  ::dsn::partition_configuration& val);

  void __set_dropped(const std::vector<ddd_node_info> & val);

  void __set_reason(const std::string& val);

  bool operator == (const ddd_partition_info & rhs) const
  {
    if (!(config == rhs.config))
      return false;
    if (!(dropped == rhs.dropped))
      return false;
    if (!(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const ddd_partition_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ddd_partition_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ddd_partition_info &a, ddd_partition_info &b);

inline std::ostream& operator<<(std::ostream& out, const ddd_partition_info& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ddd_diagnose_response__isset {
  _ddd_diagnose_response__isset() : err(false), partitions(false) {}
  bool err :1;
  bool partitions :1;
} _ddd_diagnose_response__isset;

class ddd_diagnose_response {
 public:

  ddd_diagnose_response(const ddd_diagnose_response&);
  ddd_diagnose_response& operator=(const ddd_diagnose_response&);
  ddd_diagnose_response() {
  }

  virtual ~ddd_diagnose_response() throw();
   ::dsn::error_code err;
  std::vector<ddd_partition_info>  partitions;

  _ddd_diagnose_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_partitions(const std::vector<ddd_partition_info> & val);

  bool operator == (const ddd_diagnose_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(partitions == rhs.partitions))
      return false;
    return true;
  }
  bool operator != (const ddd_diagnose_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ddd_diagnose_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ddd_diagnose_response &a, ddd_diagnose_response &b);

inline std::ostream& operator<<(std::ostream& out, const ddd_diagnose_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_get_max_replica_count_request__isset {
  _configuration_get_max_replica_count_request__isset() : app_name(false) {}
  bool app_name :1;
} _configuration_get_max_replica_count_request__isset;

class configuration_get_max_replica_count_request {
 public:

  configuration_get_max_replica_count_request(const configuration_get_max_replica_count_request&);
  configuration_get_max_replica_count_request& operator=(const configuration_get_max_replica_count_request&);
  configuration_get_max_replica_count_request() : app_name() {
  }

  virtual ~configuration_get_max_replica_count_request() throw();
  std::string app_name;

  _configuration_get_max_replica_count_request__isset __isset;

  void __set_app_name(const std::string& val);

  bool operator == (const configuration_get_max_replica_count_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    return true;
  }
  bool operator != (const configuration_get_max_replica_count_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_get_max_replica_count_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_get_max_replica_count_request &a, configuration_get_max_replica_count_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_get_max_replica_count_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_get_max_replica_count_response__isset {
  _configuration_get_max_replica_count_response__isset() : err(false), max_replica_count(false), hint_message(false) {}
  bool err :1;
  bool max_replica_count :1;
  bool hint_message :1;
} _configuration_get_max_replica_count_response__isset;

class configuration_get_max_replica_count_response {
 public:

  configuration_get_max_replica_count_response(const configuration_get_max_replica_count_response&);
  configuration_get_max_replica_count_response& operator=(const configuration_get_max_replica_count_response&);
  configuration_get_max_replica_count_response() : max_replica_count(0), hint_message() {
  }

  virtual ~configuration_get_max_replica_count_response() throw();
   ::dsn::error_code err;
  int32_t max_replica_count;
  std::string hint_message;

  _configuration_get_max_replica_count_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_max_replica_count(const int32_t val);

  void __set_hint_message(const std::string& val);

  bool operator == (const configuration_get_max_replica_count_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(max_replica_count == rhs.max_replica_count))
      return false;
    if (!(hint_message == rhs.hint_message))
      return false;
    return true;
  }
  bool operator != (const configuration_get_max_replica_count_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_get_max_replica_count_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_get_max_replica_count_response &a, configuration_get_max_replica_count_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_get_max_replica_count_response& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_set_max_replica_count_request__isset {
  _configuration_set_max_replica_count_request__isset() : app_name(false), max_replica_count(false) {}
  bool app_name :1;
  bool max_replica_count :1;
} _configuration_set_max_replica_count_request__isset;

class configuration_set_max_replica_count_request {
 public:

  configuration_set_max_replica_count_request(const configuration_set_max_replica_count_request&);
  configuration_set_max_replica_count_request& operator=(const configuration_set_max_replica_count_request&);
  configuration_set_max_replica_count_request() : app_name(), max_replica_count(0) {
  }

  virtual ~configuration_set_max_replica_count_request() throw();
  std::string app_name;
  int32_t max_replica_count;

  _configuration_set_max_replica_count_request__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_max_replica_count(const int32_t val);

  bool operator == (const configuration_set_max_replica_count_request & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (!(max_replica_count == rhs.max_replica_count))
      return false;
    return true;
  }
  bool operator != (const configuration_set_max_replica_count_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_set_max_replica_count_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_set_max_replica_count_request &a, configuration_set_max_replica_count_request &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_set_max_replica_count_request& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _configuration_set_max_replica_count_response__isset {
  _configuration_set_max_replica_count_response__isset() : err(false), old_max_replica_count(false), hint_message(false) {}
  bool err :1;
  bool old_max_replica_count :1;
  bool hint_message :1;
} _configuration_set_max_replica_count_response__isset;

class configuration_set_max_replica_count_response {
 public:

  configuration_set_max_replica_count_response(const configuration_set_max_replica_count_response&);
  configuration_set_max_replica_count_response& operator=(const configuration_set_max_replica_count_response&);
  configuration_set_max_replica_count_response() : old_max_replica_count(0), hint_message() {
  }

  virtual ~configuration_set_max_replica_count_response() throw();
   ::dsn::error_code err;
  int32_t old_max_replica_count;
  std::string hint_message;

  _configuration_set_max_replica_count_response__isset __isset;

  void __set_err(const  ::dsn::error_code& val);

  void __set_old_max_replica_count(const int32_t val);

  void __set_hint_message(const std::string& val);

  bool operator == (const configuration_set_max_replica_count_response & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(old_max_replica_count == rhs.old_max_replica_count))
      return false;
    if (!(hint_message == rhs.hint_message))
      return false;
    return true;
  }
  bool operator != (const configuration_set_max_replica_count_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const configuration_set_max_replica_count_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(configuration_set_max_replica_count_response &a, configuration_set_max_replica_count_response &b);

inline std::ostream& operator<<(std::ostream& out, const configuration_set_max_replica_count_response& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
